<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown</title>
    <url>/2023/02/19/markdown/</url>
    <content><![CDATA[<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用数字加<code>.</code> 加空格开头</p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">1. 有序列表 1
2. 有序列表 2
3. 有序列表 3</code></pre>

<ol>
<li>有序列表 1</li>
<li>有序列表 2</li>
<li>有序列表 3</li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用<code>-</code> 加空格开头</p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">- 无序列表
- 无序列表
- 无序列表
  - 无序列表
  - 无序列表</code></pre>

<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表<ul>
<li>无序列表</li>
<li>无序列表</li>
</ul>
</li>
</ul>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用<code>#</code>加空格开头</p>
<h3 id="Heading-H3"><a href="#Heading-H3" class="headerlink" title="Heading H3"></a>Heading H3</h3><h4 id="Heading-H4"><a href="#Heading-H4" class="headerlink" title="Heading H4"></a>Heading H4</h4><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>使用<code>&gt;</code>开头</p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">&gt; 对于美德，我们仅止于认识是不够的，我们还必须努力培养它，运用它，或是采取种种方法，以使我们成为良善之人。 --莎士比亚

&gt; &gt; 黑夜无论怎样悠长，白昼总会到来。

&gt; &gt; &gt; To be or not to be,that&#39;s a question. --莎士比亚</code></pre>

<blockquote>
<p>对于美德，我们仅止于认识是不够的，我们还必须努力培养它，运用它，或是采取种种方法，以使我们成为良善之人。 –莎士比亚</p>
</blockquote>
<blockquote>
<blockquote>
<p>黑夜无论怎样悠长，白昼总会到来。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>To be or not to be,that’s a question. –莎士比亚</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p>使用<code>**</code>进行包括</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">**粗体**</code></pre>

<p><strong>粗体</strong></p>
<h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>使用<code>*</code>或<code>_</code>进行包括</p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">_斜体_</code></pre>

<p><em>斜体</em></p>
<h2 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h2><p>使用<code>**</code>进行包括</p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">**_斜体_**</code></pre>

<p><strong><em>斜体</em></strong></p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><code>![img alt的值](图片地址)</code></p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">![ShineShao](https:&#x2F;&#x2F;avatars2.githubusercontent.com&#x2F;u&#x2F;16034259?s&#x3D;460&amp;u&#x3D;7caff2589de5d263f44675662d8f1a5b91a1d706&amp;v&#x3D;4)</code></pre>

<p><img src="https://avatars2.githubusercontent.com/u/16034259?s=460&u=7caff2589de5d263f44675662d8f1a5b91a1d706&v=4" alt="ShineShao"></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><code>[链接名](链接地址)</code></p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">&#123;&#x2F;_ 链接 _&#x2F;&#125;
[ShineShao](https:&#x2F;&#x2F;github.com&#x2F;freeshineit)

&#123;&#x2F;_ 图片链接 _&#x2F;&#125;
[![ShineShao](https:&#x2F;&#x2F;avatars2.githubusercontent.com&#x2F;u&#x2F;16034259?s&#x3D;460&amp;u&#x3D;7caff2589de5d263f44675662d8f1a5b91a1d706&amp;v&#x3D;4)](https:&#x2F;&#x2F;github.com&#x2F;freeshineit)</code></pre>

<p><a href="https://github.com/freeshineit">ShineShao</a></p>
<p><a href="https://github.com/freeshineit"><img src="https://avatars2.githubusercontent.com/u/16034259?s=460&u=7caff2589de5d263f44675662d8f1a5b91a1d706&v=4" alt="ShineShao"></a></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>使用至少连续的三个<code>-</code></p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">---</code></pre>

<hr>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>使用<code>~~</code>进行包括</p>
<pre class="language-markdown" data-language="markdown"><code class="language-markdown">~~分割线~~</code></pre>

<p><del>分割线</del></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre class="language-markdown" data-language="markdown"><code class="language-markdown">| 表头     |   表头   |     表头 |
| :------- | :------: | -------: |
| 内容居左 | 内容居中 | 内容居右 |</code></pre>

<table>
<thead>
<tr>
<th align="left">表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="center">单元格</td>
<td align="right">单元格单元格单元格单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="center">单元格单元格单元格单元格</td>
<td align="right">单元格</td>
</tr>
</tbody></table>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><pre class="language-go" data-language="go"><code class="language-go">package main;

import &quot;fmt&quot;;

func main () &#123;
  fmt.Println(&quot;Hello World&quot;)
&#125;</code></pre>

<h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><pre class="language-diff" data-language="diff"><code class="language-diff">+ 123
- 123412</code></pre>

<h2 id="普通文本"><a href="#普通文本" class="headerlink" title="普通文本"></a>普通文本</h2><p>每个人都会有缺陷，就像被上帝咬过的苹果，有的人缺陷比较大，正是因为上帝特别喜欢他的芬芳。</p>
<h2 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h2><pre class="language-markdown" data-language="markdown"><code class="language-markdown">- [ ] 任务一 未做任务 &#96;- + 空格 + [ ]&#96;
- [x] 任务二 已做任务 &#96;- + 空格 + [x]&#96;</code></pre>

<ul>
<li><input disabled="" type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li>
<li><input checked="" disabled="" type="checkbox"> 任务二 已做任务 <code>- + 空格 + [x]</code></li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre class="language-markdown" data-language="markdown"><code class="language-markdown">[&#x2F;&#x2F;]: # &quot;注释&quot;</code></pre>

<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&amp;nbsp; 空格
&lt; &lt;
&gt; &gt;
&amp; &amp;
&amp;yen; ¥
&amp;copy; ©
&amp;reg; ®
&amp;deg;C °C
&amp;plusmn; ±
&amp;times; ×
&amp;divide; ÷
m&amp;sup2; m²
m&amp;sup3; m³</code></pre>

<p>&amp;nbsp;<br>&lt;<br>&gt;<br>&amp;<br>&amp;yen;<br>&amp;copy;<br>&amp;reg;<br>&amp;deg;C<br>&amp;plusmn;<br>&amp;times;<br>&amp;divide;<br>m&amp;sup2;<br>m&amp;sup3;</p>
<h2 id="details"><a href="#details" class="headerlink" title="details"></a>details</h2><pre class="language-markdown" data-language="markdown"><code class="language-markdown">&lt;details&gt;
  &lt;summary&gt;展开&lt;&#x2F;summary&gt;
  Something small enough to escape casual notice.
&lt;&#x2F;details&gt;</code></pre>

<details>
  <summary>展开</summary>
  Something small enough to escape casual notice.
</details>

<h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><pre class="language-markdown" data-language="markdown"><code class="language-markdown">🐶 👍
😁 🔕</code></pre>

<p>🐶 👍<br>😁 🔕</p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><pre class="language-markdown" data-language="markdown"><code class="language-markdown">使用 &#96;Markdown&#96;[^1]可以效率的书写文档, 直接转换成 &#96;HTML&#96;[^2], 你可以使用 &#96;Typora&#96;[^t] 编辑器进行书写。

[^1]: Markdown 是一种纯文本标记语言
[^2]: HyperText Markup Language 超文本标记语言
[^t]: [NEW WAY TO READ &amp; WRITE MARKDOWN.](https:&#x2F;&#x2F;www.baidu.com)</code></pre>

<p>使用 <code>Markdown</code>[^1]可以效率的书写文档, 直接转换成 <code>HTML</code>[^2], 你可以使用 <code>Typora</code>[^t] 编辑器进行书写。</p>
<p>[^1]: Markdown 是一种纯文本标记语言<br>[^2]: HyperText Markup Language 超文本标记语言<br>[^t]: <a href="https://www.baidu.com/">NEW WAY TO READ &amp; WRITE MARKDOWN.</a></p>
<p><a href="LICENSE">MIT</a> © <a href="https://github.com/freeshineit">ShineShao</a></p>
]]></content>
      <categories>
        <category>技术</category>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令</title>
    <url>/2023/02/19/git/antic/</url>
    <content><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><pre class="language-bash" data-language="bash"><code class="language-bash"># rebase
git rebase master

# 解决冲突后
git add .

# continue
git rebase --continue</code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash"># discard 丢弃缓存
git reset HEAD

# 丢弃指定文件缓存
git reset HEAD &lt;file&gt;

# 撤销最新的commit
git reset HEAD^

# 修改最新的一次commit 日志
git commit --amend
## 或者使用别名
git ca
</code></pre>

<h3 id="使用-执行多条命令"><a href="#使用-执行多条命令" class="headerlink" title="使用; 执行多条命令"></a>使用<code>;</code> 执行多条命令</h3><pre class="language-bash" data-language="bash"><code class="language-bash">git add .; git status</code></pre>

<h3 id="配置命令别名（Aliases）"><a href="#配置命令别名（Aliases）" class="headerlink" title="配置命令别名（Aliases）"></a>配置命令别名（<a href="https://git-scm.com/book/zh-tw/v2/Git-%E5%9F%BA%E7%A4%8E-Git-Aliases">Aliases</a>）</h3><p>git 默认配置了部分别名，可以使用<code>git config --list</code> 查看</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"># git commit -m
# git config --global alias.cm commit -m
git cm

# git log --stat --abbrev-commit
# git config --global alias.ll log --stat --abbrev-commit
git ll

# git diff
# git config --global alias.d diff
git d</code></pre>

<p>配置别名命令</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"># 配置别名命令
git config --global alias.st status

# 使用 git st 相当于 git status
git st</code></pre>

<p>git log 别名配置</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"># git l
git config --global alias.l &quot;log --graph --all --pretty&#x3D;format:&#39;%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset&#39;&quot;

# git ll
git config --global alias.ll &quot;log --stat --abbrev-commit&quot;

# git lg
git config --global alias.lg &quot;log --color --graph --pretty&#x3D;format:&#39;%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset&#39; --abbrev-commit --date&#x3D;relative&quot;

# git llg
git config --global alias.llg &quot;log --color --graph --pretty&#x3D;format:&#39;%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)&#39; --abbrev-commit&quot;</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang Sync</title>
    <url>/2023/02/19/golang/sync/</url>
    <content><![CDATA[<h2 id="golang-goroutine-同步操作"><a href="#golang-goroutine-同步操作" class="headerlink" title="golang goroutine 同步操作"></a>golang goroutine 同步操作</h2><h3 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a><a href="https://golang.org/pkg/sync/#WaitGroup">sync.WaitGroup</a></h3><pre class="language-go" data-language="go"><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;sync&quot;
	&quot;time&quot;
)

func worker(i int, wg *sync.WaitGroup) &#123;
	fmt.Printf(&quot;sync worker %d starting\n&quot;, i)
	time.Sleep(time.Second)
	fmt.Printf(&quot;sync worker %d done\n&quot;, i)
	defer wg.Done()
&#125;

&#x2F;&#x2F; sync.WaitGroup
func SyncWaitGroup() &#123;
	var wg sync.WaitGroup
	fmt.Println(&quot;this is SyncWaitGroup func&quot;)
	for i :&#x3D; 1; i &lt;&#x3D; 10; i++ &#123;
		&#x2F;&#x2F; 创建10个 goroutine
		wg.Add(1)
		go worker(i, &amp;wg)
	&#125;
	wg.Wait()
&#125;
</code></pre>

<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a><a href="https://blog.golang.org/pipelines">Channel</a></h3><pre class="language-go" data-language="go"><code class="language-go">package main

import (
	&quot;fmt&quot;
	&quot;time&quot;
)

func chanWorker(i int, done chan int) &#123;
	fmt.Printf(&quot;chan worker %d starting\n&quot;, i)
	time.Sleep(time.Second)
	fmt.Printf(&quot;chan worker %d done\n&quot;, i)
	done &lt;- i
&#125;

&#x2F;&#x2F; chan
func Channel() &#123;
	c :&#x3D; make(chan int)
	fmt.Println(&quot;this is Channel func&quot;)
	for i :&#x3D; 1; i &lt;&#x3D; 10; i++ &#123;
		&#x2F;&#x2F; 创建10个 goroutine
		go chanWorker(i, c)
	&#125;
	&lt;-c
&#125;
</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>goroutine</tag>
        <tag>channel</tag>
      </tags>
  </entry>
  <entry>
    <title>Gulp 源码分析</title>
    <url>/2023/02/19/gulp/source/</url>
    <content><![CDATA[<h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><pre class="language-javascript" data-language="javascript"><code class="language-javascript">&quot;use strict&quot;;

var util &#x3D; require(&quot;util&quot;);
&#x2F;&#x2F; https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;undertaker
&#x2F;&#x2F; undertaker类提供了task，series，parallel，get，set，tree和registry方法
&#x2F;&#x2F; undertaker类继承于node核心类eventemitter
var Undertaker &#x3D; require(&quot;undertaker&quot;);
&#x2F;&#x2F; https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;vinyl-fs
&#x2F;&#x2F; vinyl是vitual file formate虚拟文件格式，用于描述一个文件。
&#x2F;&#x2F; 它有两个主要的属性，path属性和contents属性。每一个Vinyl实例代表一个独立的文件、目录或者symlink符号连接。
var vfs &#x3D; require(&quot;vinyl-fs&quot;);
&#x2F;&#x2F; https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;glob-watcher
&#x2F;&#x2F; 观察globs并在更改时执行一个函数，并使用智能默认值取消绑定和排队。
var watch &#x3D; require(&quot;glob-watcher&quot;);

function Gulp() &#123;
  &#x2F;&#x2F; 改变Undertaker的this 指向，指向Gulp
  Undertaker.call(this);

  &#x2F;&#x2F; Bind the functions for destructuring
  this.watch &#x3D; this.watch.bind(this);
  &#x2F;&#x2F; 任务。 由undertaker类提供
  this.task &#x3D; this.task.bind(this);
  &#x2F;&#x2F; 任务顺序依次执行。 由undertaker类提供
  this.series &#x3D; this.series.bind(this);
  &#x2F;&#x2F; 将任务功能或组合操作组合成并行执行的较大操作。 由undertaker类提供
  this.parallel &#x3D; this.parallel.bind(this);
  &#x2F;&#x2F; https:&#x2F;&#x2F;www.gulpjs.com.cn&#x2F;docs&#x2F;api&#x2F;registry&#x2F;
  &#x2F;&#x2F; 允许将自定义的注册表插入到任务系统中，以期提供共享任务或增强功能。
  &#x2F;&#x2F; 由undertaker类提供
  this.registry &#x3D; this.registry.bind(this);
  &#x2F;&#x2F; 获取当前任务依赖关系树。 由undertaker类提供
  this.tree &#x3D; this.tree.bind(this);
  &#x2F;&#x2F; 由undertaker类提供
  this.lastRun &#x3D; this.lastRun.bind(this);
  &#x2F;&#x2F; 创建一个流，用于从文件系统读取 Vinyl 对象。由 vinyl-fs 提供
  this.src &#x3D; this.src.bind(this);
  &#x2F;&#x2F; 创建一个用于将 Vinyl 对象写入到文件系统的流。由 vinyl-fs 提供
  this.dest &#x3D; this.dest.bind(this);
  &#x2F;&#x2F; 符号链接。 由 vinyl-fs 提供
  this.symlink &#x3D; this.symlink.bind(this);
&#125;

&#x2F;&#x2F; https:&#x2F;&#x2F;nodejs.org&#x2F;docs&#x2F;latest&#x2F;api&#x2F;util.html#utilinheritsconstructor-superconstructor
&#x2F;&#x2F; 继承
&#x2F;&#x2F; 已经不建议使用了， 最好使用es6的继承方式  extends
util.inherits(Gulp, Undertaker);

&#x2F;&#x2F; https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;vinyl-fs#options
&#x2F;&#x2F; vfs.src(globs[, options])
Gulp.prototype.src &#x3D; vfs.src;
&#x2F;&#x2F; https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;vinyl-fs#destfolder-options
&#x2F;&#x2F; vfs.dest(folder[, options])
&#x2F;&#x2F; 将文件夹路径字符串或函数作为第一个参数，将选项对象作为第二个参数。
&#x2F;&#x2F; 如果给定一个函数，它将与每个vinyl File对象一起调用，并且必须返回文件夹路径。
&#x2F;&#x2F; 返回一个流，该流接受vinyl File对象，将它们写入指定文件夹&#x2F;cwd中的磁盘，并将它们传递到下游，这样您就可以继续使用管道。
&#x2F;&#x2F; 一旦文件写入磁盘后，将尝试确定vinyl File对象的&#96;stat.mode&#96;、&#96;stat.mtime&#96;和&#96;stat.atime&#96;是否与文件系统上的文件不同。
&#x2F;&#x2F; 如果它们不同，并且正在运行的进程拥有该文件，则会更新相应的文件系统元数据。
&#x2F;&#x2F; 如果它们没有差异或进程不拥有文件，则会自动跳过尝试。
&#x2F;&#x2F; 如果文件具有指定目标路径的&#96;symlink&#96;属性，则将创建&#96;symlink&#96;。
Gulp.prototype.dest &#x3D; vfs.dest;

&#x2F;&#x2F; https:&#x2F;&#x2F;www.npmjs.com&#x2F;package&#x2F;vinyl-fs#symlinkfolder-options
&#x2F;&#x2F; vfs.symlink(folder[, options])
&#x2F;&#x2F; 将文件夹路径字符串或函数作为第一个参数，将选项对象作为第二个参数。
&#x2F;&#x2F; 如果给定一个函数，它将与每个vinyl File对象一起调用，并且必须返回文件夹路径。
&#x2F;&#x2F; 返回一个流，该流接受vinyl File对象，在指定的文件夹&#x2F;cwd处创建一个&#96;symlink&#96;，并将其传递到下游，这样您就可以继续使用管道传递这些对象。
Gulp.prototype.symlink &#x3D; vfs.symlink;
&#x2F;&#x2F; 在 &#96;glob-watcher&#96; 前做校验和兼容
&#x2F;&#x2F;
Gulp.prototype.watch &#x3D; function (glob, opt, task) &#123;
  if (
    typeof opt &#x3D;&#x3D;&#x3D; &quot;string&quot; ||
    typeof task &#x3D;&#x3D;&#x3D; &quot;string&quot; ||
    Array.isArray(opt) ||
    Array.isArray(task)
  ) &#123;
    throw new Error(
      &quot;watching &quot; +
        glob +
        &quot;: watch task has to be &quot; +
        &quot;a function (optionally generated by using gulp.parallel &quot; +
        &quot;or gulp.series)&quot;
    );
  &#125;

  if (typeof opt &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;
    task &#x3D; opt;
    opt &#x3D; &#123;&#125;;
  &#125;

  opt &#x3D; opt || &#123;&#125;;

  var fn;
  if (typeof task &#x3D;&#x3D;&#x3D; &quot;function&quot;) &#123;
    fn &#x3D; this.parallel(task);
  &#125;

  &#x2F;&#x2F; watch() 方法时通过 &#96;events&#96; 参数进行指定。
  &#x2F;&#x2F; 可用的事件有 &#39;add&#39;、&#39;addDir&#39;、&#39;change&#39;、&#39;unlink&#39;、&#39;unlinkDir&#39;、&#39;ready&#39;、&#39;error&#39;。
  &#x2F;&#x2F; 此外，还有一个 &#39;all&#39; 事件，它表示除 &#39;ready&#39; 和 &#39;error&#39; 之外的所有事件。
  return watch(glob, opt, fn);
&#125;;

&#x2F;&#x2F; Let people use this class from our instance
Gulp.prototype.Gulp &#x3D; Gulp;
&#x2F;&#x2F; Gulp 实例
var inst &#x3D; new Gulp();
module.exports &#x3D; inst;</code></pre>
]]></content>
      <categories>
        <category>技术</category>
        <category>gulp</category>
      </categories>
      <tags>
        <tag>gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 工具</title>
    <url>/2023/02/19/mac/tools/</url>
    <content><![CDATA[<h2 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a><a href="https://brew.sh/">homebrew</a></h2><p><a href="https://brew.sh/">homebrew</a> 安装 <code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code></p>
<ol>
<li><p>安装插件</p>
<ul>
<li>安装 <a href="https://git-scm.com/">git</a></li>
</ul>
<p><code>brew install git</code></p>
<ul>
<li>安装 <a href="https://github.com/wting/autojump">autojump</a></li>
</ul>
<p><code>brew install autojump</code></p>
<p>在 ~&#x2F;.zshrc 中找到<code>plugins</code> 添加 <code>autojump</code>, 注意 ⚠️ 每个插件间用空格隔开</p>
</li>
</ol>
<h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a><a href="https://iterm2.com/">iTerm2</a></h2><ol>
<li><p>安装插件</p>
<ul>
<li>安装 <a href="https://ohmyz.sh/">oh-my-zsh</a> 主题</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash">sh -c &quot;\$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</code></pre>

<ul>
<li>安装 <a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions</code></pre>

<p>在 ~&#x2F;.zshrc 中找到<code>plugins</code> 添加 <code>zsh-autosuggestions</code>, 注意 ⚠️ 每个插件间用空格隔开</p>
<ul>
<li>安装 <a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting</code></pre>

<p>在 ~&#x2F;.zshrc 中找到<code>plugins</code> 添加 <code>zsh-syntax-highlighting</code>, 注意 ⚠️ 每个插件间用空格隔开</p>
<p>最终结果</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">plugins&#x3D;(
 git
 zsh-syntax-highlighting
 zsh-autosuggestions
 autojump
)</code></pre></li>
</ol>
<h2 id="vim-配置"><a href="#vim-配置" class="headerlink" title="vim 配置"></a>vim 配置</h2><p>可以参考 阮一峰老师的 <a href="https://www.ruanyifeng.com/blog/2018/09/vimrc.html">Vim 配置入门</a></p>
<p>在 <code>~/.vimrc</code> 配置 (如果没有请自建<code>touch ~/.vimrc</code>)</p>
<p>我的基本设置</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">set number
syntax on
set mouse&#x3D;a
set encoding&#x3D;utf-8
set autoindent
set tabstop&#x3D;2
set cursorline
set ruler
set showmatch
set incsearch
set hlsearch</code></pre>
]]></content>
      <categories>
        <category>技术</category>
      </categories>
      <tags>
        <tag>mac</tag>
        <tag>工具</tag>
      </tags>
  </entry>
</search>
