<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>前端面试</title>
    <url>/2022/11/08/fe-interview/</url>
    <content><![CDATA[<h2 id="javascript"><a href="#javascript" class="headerlink" title="javascript"></a>javascript</h2><h3 id="this-的指向（谁调用指向谁）"><a href="#this-的指向（谁调用指向谁）" class="headerlink" title="this 的指向（谁调用指向谁）"></a>this 的指向（谁调用指向谁）</h3><h3 id="普通函数和箭头函数的区别"><a href="#普通函数和箭头函数的区别" class="headerlink" title="普通函数和箭头函数的区别"></a>普通函数和箭头函数的区别</h3><ul>
<li>语法更加简洁、清晰</li>
<li>箭头函数没有自己的 <code>this</code></li>
<li>箭头函数继承而来的 <code>this</code> 指向永远不变</li>
<li><code>call</code>,<code>apply</code>,<code>bind</code>无法改变箭头函数中 <code>this</code> 的指向</li>
<li>箭头函数不能作为构造函数使用 (为什么)</li>
<li>箭头函数没有自己的 <code>arguments</code> (为什么)</li>
<li>箭头函数没有原型 <code>prototype</code> (为什么)</li>
<li>箭头函数不能用作 <code>Generator</code> 函数，不能使用 <code>yeild</code> 关键字 (为什么)</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions#%E8%A7%A3%E6%9E%90%E9%A1%BA%E5%BA%8F">解析顺序</a> 虽然箭头函数中的箭头不是运算符，但箭头函数具有与常规函数不同的特殊运算符优先级解析规则。</li>
</ul>
<p><a href="https://juejin.cn/post/6844903805960585224">ES6 - 箭头函数、箭头函数与普通函数的区别</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions">箭头函数</a></p>
<h3 id="javascript-闭包"><a href="#javascript-闭包" class="headerlink" title="javascript 闭包"></a>javascript 闭包</h3><h3 id="javascript-的作用域"><a href="#javascript-的作用域" class="headerlink" title="javascript 的作用域"></a>javascript 的作用域</h3><h3 id="javascript-变量向上找取的原理-执行上下文"><a href="#javascript-变量向上找取的原理-执行上下文" class="headerlink" title="javascript 变量向上找取的原理(执行上下文)"></a>javascript 变量向上找取的原理(执行上下文)</h3><h3 id="javascript-的语法分析"><a href="#javascript-的语法分析" class="headerlink" title="javascript 的语法分析"></a>javascript 的语法分析</h3><h3 id="javascript-的词法分析"><a href="#javascript-的词法分析" class="headerlink" title="javascript 的词法分析"></a>javascript 的词法分析</h3><p><a href="https://juejin.cn/post/6943550570515038245">https://juejin.cn/post/6943550570515038245</a></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><pre><code class="highlight ts"><span class="comment">// es5</span>
<span class="keyword">function</span> <span class="title function_">PersonFn</span> (<span class="params"></span>) &#123;&#125;

<span class="keyword">function</span> <span class="title function_">SupermanFn</span>(<span class="params"></span>) &#123;&#125;

<span class="title class_">SupermanFn</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">PersonFn</span>()


<span class="comment">// es6</span>
<span class="keyword">class</span> <span class="title class_">Person</span> () &#123;&#125;

<span class="keyword">class</span> <span class="title class_">Superman</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;&#125;</code></pre>

<h3 id="洋葱模型"><a href="#洋葱模型" class="headerlink" title="洋葱模型"></a>洋葱模型</h3><pre><code class="highlight ts"><span class="comment">// 类似递归</span>
<span class="comment">// 在 next 中执行下一个function, 依次递归</span>
<span class="comment">// 如果不好理解可以参考`tapable` 中代码的实现, `tapable`是把所有函数铺平，依次嵌套</span>
<span class="comment">// 而下面的实现是对依次嵌套改成了递归嵌套</span>
<span class="comment">// 以上是个人理解</span>
<span class="keyword">function</span> <span class="title function_">compose</span> (<span class="params">middleware</span>) &#123;
   <span class="keyword">return</span> <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;
      <span class="keyword">let</span> args = <span class="variable language_">arguments</span>
      <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">dispatch</span> (<span class="params">i</span>) &#123;
         <span class="keyword">const</span> fn = middleware[i]
         <span class="keyword">if</span> (!fn) <span class="keyword">return</span> <span class="literal">null</span>
         <span class="keyword">await</span> <span class="title function_">fn</span>(<span class="keyword">function</span> <span class="title function_">next</span> (<span class="params"></span>) &#123;
            <span class="title function_">dispatch</span>(i + <span class="number">1</span>)
         &#125;, ...args)
      &#125;

      <span class="keyword">await</span> <span class="title function_">dispatch</span>(<span class="number">0</span>)
   &#125;
&#125;

<span class="keyword">let</span> middleware = []
middleware.<span class="title function_">push</span>(<span class="function">(<span class="params">next</span>) =&gt;</span> &#123;
	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)
	<span class="title function_">next</span>()
	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;next:&quot;</span>, <span class="number">3.3</span>)
&#125;)
middleware.<span class="title function_">push</span>(<span class="function">(<span class="params">next</span>) =&gt;</span> &#123;
	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)
	<span class="title function_">next</span>()
	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;next:&quot;</span>, <span class="number">1.1</span>)
&#125;)
middleware.<span class="title function_">push</span>(<span class="function">() =&gt;</span> &#123;
    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)
&#125;)

<span class="keyword">let</span> fn = <span class="title function_">compose</span>(middleware)
<span class="title function_">fn</span>() <span class="comment">// 0 1 2 next:1.1 next:3.3</span>
</code></pre>

<h2 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h2><h3 id="浏览器的进程（Chrome）"><a href="#浏览器的进程（Chrome）" class="headerlink" title="浏览器的进程（Chrome）"></a>浏览器的进程（Chrome）</h3><ul>
<li>Browser Process 浏览器的主进程（负责协调、主控） （1）负责包括地址栏，书签栏，前进后退按钮等部分的工作 （2）负责处理浏览器的一些不可见的底层操作，比如网络请求和文件访问 （3）负责各个页面的管理，创建和销毁其他进程</li>
<li>Utility Process</li>
<li>Render Process 负责一个 tab 内关于网页呈现的所有事情，页面渲染，脚本执行，事件处理等</li>
<li>GPU Process 负责控制一个网页用到的所有插件，如 flash 每种类型的插件对应一个进程，仅当使用该插件时才创建</li>
<li>Plugin Process 负责处理 GPU 相关的任务</li>
</ul>
<p><a href="https://juejin.cn/post/6844903812642111501">浏览器多线程和 js 单线程</a></p>
<h3 id="在浏览器输入-URL-回车之后发生了什么"><a href="#在浏览器输入-URL-回车之后发生了什么" class="headerlink" title="在浏览器输入 URL 回车之后发生了什么"></a>在浏览器输入 URL 回车之后发生了什么</h3><p><a href="https://zhuanlan.zhihu.com/p/80551769">在浏览器输入 URL 回车之后发生了什么</a></p>
<h3 id="浏览器-GC"><a href="#浏览器-GC" class="headerlink" title="浏览器 GC"></a>浏览器 GC</h3><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><h3 id="npm-执行命令的流程"><a href="#npm-执行命令的流程" class="headerlink" title="npm 执行命令的流程"></a>npm 执行命令的流程</h3><h3 id="eventloop"><a href="#eventloop" class="headerlink" title="eventloop"></a>eventloop</h3><h3 id="前端页面优化"><a href="#前端页面优化" class="headerlink" title="前端页面优化"></a>前端页面优化</h3><ul>
<li>压缩 js&#x2F;css&#x2F;html&#x2F;图片，减少请求流量</li>
<li>合并小文件都一个文件中，减少请求数</li>
<li>静态资源使用 CDN</li>
<li>图片尽量使用 webp等压缩效果比较好的图片格式 ， 可以使用picture标签</li>
<li>服务端开启 gzip等压缩</li>
<li>使用PWA</li>
<li>使用缓存</li>
<li>图片懒加载&#x2F;使用雪碧图&#x2F;使用 svg</li>
<li>使用 js 懒加载&#x2F;预加载</li>
<li>减少 dom 的层级嵌套</li>
<li>避免 table 布局</li>
<li>css3 开启 GPU 加速</li>
<li>避免重定向</li>
<li>接口使用异步请求</li>
<li>尽量减少请求</li>
<li>如果有必要可以使用Workers</li>
<li>避免&#x2F;减少重排与重绘</li>
</ul>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h3 id="http1-和-http2-的区别"><a href="#http1-和-http2-的区别" class="headerlink" title="http1 和 http2 的区别"></a>http1 和 http2 的区别</h3><h3 id="网络分层"><a href="#网络分层" class="headerlink" title="网络分层"></a>网络分层</h3><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><h3 id="TypeScript-的类型"><a href="#TypeScript-的类型" class="headerlink" title="TypeScript 的类型"></a>TypeScript 的类型</h3><p><code>any</code>,<code>string</code>,<code>number</code>,<code>boolean</code>,<code>Symbol</code>,<code>Array</code>,<code>null</code>,<code>unknow</code>,<code>never</code>,<code>void</code> …</p>
<h3 id="TypeScript-中-any、never、unknown、null-undefined-和-void-有什么区别？"><a href="#TypeScript-中-any、never、unknown、null-undefined-和-void-有什么区别？" class="headerlink" title="TypeScript 中 any、never、unknown、null &amp; undefined 和 void 有什么区别？"></a>TypeScript 中 any、never、unknown、null &amp; undefined 和 void 有什么区别？</h3><pre><code class="highlight plaintext">any: 动态的变量类型（失去了类型检查的作用）。
never: 永不存在的值的类型。例如：never 类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型。
unknown: 任何类型的值都可以赋给  unknown  类型，但是  unknown  类型的值只能赋给  unknown  本身和  any  类型。
null &amp; undefined: 默认情况下 null 和 undefined 是所有类型的子类型。 就是说你可以把  null 和 undefined 赋值给 number 类型的变量。当你指定了 --strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自。
void: 没有任何类型。例如：一个函数如果没有返回值，那么返回值可以定义为 void。

作者：周姐日常事
链接：https://juejin.cn/post/6999985372440559624
来源：稀土掘金</code></pre>

<h3 id="TypeScript-联合类型"><a href="#TypeScript-联合类型" class="headerlink" title="TypeScript 联合类型"></a>TypeScript 联合类型</h3><h3 id="TypeScript-中如何联合枚举类型的-Key"><a href="#TypeScript-中如何联合枚举类型的-Key" class="headerlink" title="TypeScript 中如何联合枚举类型的 Key?"></a>TypeScript 中如何联合枚举类型的 Key?</h3><pre><code class="highlight ts"><span class="keyword">enum</span> str &#123;
  A,
  B,
  C
&#125;
<span class="keyword">type</span> strUnion = keyof <span class="keyword">typeof</span> str; <span class="comment">// &#x27;A&#x27; | &#x27;B&#x27; | &#x27;C&#x27;</span></code></pre>

<h3 id="type-和-interface-的区别"><a href="#type-和-interface-的区别" class="headerlink" title="type 和 interface 的区别"></a>type 和 interface 的区别</h3><h3 id="协变、逆变、双变和抗变的理解？"><a href="#协变、逆变、双变和抗变的理解？" class="headerlink" title="协变、逆变、双变和抗变的理解？"></a>协变、逆变、双变和抗变的理解？</h3><pre><code class="highlight ts">协变：X = Y Y 类型可以赋值给 X 类型的情况就叫做协变，也可以说是 X 类型兼容 Y 类型
<span class="keyword">interface</span> X &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; &#125;
<span class="keyword">interface</span> Y &#123; <span class="attr">name</span>: <span class="built_in">string</span>; <span class="attr">age</span>: <span class="built_in">number</span>; <span class="attr">hobbies</span>: <span class="built_in">string</span>[] &#125;
<span class="keyword">let</span> <span class="attr">x</span>: X = &#123; <span class="attr">name</span>: <span class="string">&#x27;xiaoming&#x27;</span>, <span class="attr">age</span>: <span class="number">16</span> &#125;
<span class="keyword">let</span> <span class="attr">y</span>: Y = &#123; <span class="attr">name</span>: <span class="string">&#x27;xiaohong&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">hobbies</span>: [<span class="string">&#x27;eat&#x27;</span>] &#125;
x = y
复制代码
逆变：printY = printX 函数X 类型可以赋值给函数Y 类型，因为函数Y 在调用的时候参数是按照Y类型进行约束的，但是用到的是函数X的X的属性和方法，ts检查结果是类型安全的。这种特性就叫做逆变，函数的参数有逆变的性质。
<span class="keyword">let</span> <span class="attr">printY</span>: <span class="function">(<span class="params"><span class="attr">y</span>: Y</span>) =&gt;</span> <span class="built_in">void</span>
printY = <span class="function">(<span class="params">y</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(y.<span class="property">hobbies</span>) &#125;
<span class="keyword">let</span> <span class="attr">printX</span>: <span class="function">(<span class="params"><span class="attr">x</span>: X</span>) =&gt;</span> <span class="built_in">void</span>
printX = <span class="function">(<span class="params">x</span>) =&gt;</span> &#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(x.<span class="property">name</span>) &#125;
printY = printX
复制代码
双变（双向协变）：X = Y；Y = X父类型可以赋值给子类型，子类型可以赋值给父类型，既逆变又协变，叫做“双向协变”（ts2.<span class="property">x</span> 之前支持这种赋值，之后 ts 加了一个编译选项 strictFunctionTypes，设置为 <span class="literal">true</span> 就只支持函数参数的逆变，设置为 <span class="literal">false</span> 则支持双向协变）
抗变（不变）：非父子类型之间不会发生型变，只要类型不一样就会报错
</code></pre>

<h3 id="declare，declare-global-是什么？"><a href="#declare，declare-global-是什么？" class="headerlink" title="declare，declare global 是什么？"></a>declare，declare global 是什么？</h3><p>declare 是用来定义全局变量、全局函数、全局命名空间、js modules、class 等<br>declare global 为全局对象 window 增加新的属性</p>
<h3 id="TypeScript-类中成员的-public、private、protected、readonly-修饰符的理解"><a href="#TypeScript-类中成员的-public、private、protected、readonly-修饰符的理解" class="headerlink" title="TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解"></a>TypeScript 类中成员的 public、private、protected、readonly 修饰符的理解</h3><p>public: 成员都默认为 public，被此限定符修饰的成员是可以被外部访问；<br>private: 被此限定符修饰的成员是只可以被类的内部访问；<br>protected: 被此限定符修饰的成员是只可以被类的内部以及类的子类访问;<br>readonly: 关键字将属性设置为只读的。 只读属性必须在声明时或构造函数里被初始化。</p>
<h3 id="keyof-和-typeof-关键字的作用"><a href="#keyof-和-typeof-关键字的作用" class="headerlink" title="keyof 和 typeof 关键字的作用"></a>keyof 和 typeof 关键字的作用</h3><p>keyof 索引类型查询操作符 获取索引类型的属性名，构成联合类型。<br>typeof 获取一个变量或对象的类型。</p>
<h3 id="工具类型-Partial、Required、Readonly、Record、Extract、ReturnType、Exclude、Omit-的作用"><a href="#工具类型-Partial、Required、Readonly、Record、Extract、ReturnType、Exclude、Omit-的作用" class="headerlink" title="工具类型 Partial、Required、Readonly、Record、Extract、ReturnType、Exclude、Omit 的作用"></a>工具类型 Partial、Required、Readonly、Record、Extract、ReturnType、Exclude、Omit 的作用</h3><h3 id="实现一个递归的类型"><a href="#实现一个递归的类型" class="headerlink" title="实现一个递归的类型"></a>实现一个递归的类型</h3><h3 id="TypeScript-中-、-、-、-、-、-等符号的含义"><a href="#TypeScript-中-、-、-、-、-、-等符号的含义" class="headerlink" title="TypeScript 中 ?.、??、!、!.、_、** 等符号的含义"></a>TypeScript 中 ?.、??、!、!.、_、** 等符号的含义</h3><p>?. 可选链 遇到 null 和 undefined 可以立即停止表达式的运行。<br>?? 空值合并运算符 当左侧操作数为 null 或 undefined 时，其返回右侧的操作数，否则返回左侧的操作数。<br>! 非空断言运算符 x! 将从 x 值域中排除 null 和 undefined<br>!. 在变量名后添加，可以断言排除 undefined 和 null 类型<br>_ 数字分割符 分隔符不会改变数值字面量的值，使人更容易读懂数字 .e.g 1_101_324。<br>** 求幂</p>
<h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="hooks"><a href="#hooks" class="headerlink" title="hooks"></a>hooks</h3><h3 id="react-diff"><a href="#react-diff" class="headerlink" title="react diff"></a>react diff</h3><h3 id="fiber"><a href="#fiber" class="headerlink" title="fiber"></a>fiber</h3><h2 id="算法或代码实现"><a href="#算法或代码实现" class="headerlink" title="算法或代码实现"></a>算法或代码实现</h2><h3 id="异步加法-字节"><a href="#异步加法-字节" class="headerlink" title="异步加法(字节)"></a>异步加法(字节)</h3><pre><code class="highlight ts"><span class="comment">// const addRemote = async (a, b) =&gt; new Promise(resolve =&gt; &#123;</span>
<span class="comment">//     setTimeout(() =&gt; resolve(a + b), 1000)</span>
<span class="comment">// &#125;)</span>

<span class="comment">// const addRemote = async (a, b) =&gt; new Promise(resolve =&gt;</span>
<span class="comment">//     setTimeout ( () =&gt; resolve(a + b), 1000)</span>
<span class="comment">// 2):</span>
<span class="comment">// async function add (...inputs) &#123;</span>
<span class="comment">// &#125;</span>
<span class="comment">// addmte</span>
<span class="comment">// // 的加法。</span>
<span class="comment">// async function add(..inputs) &#123;</span>
<span class="comment">// 1你的实现</span>
<span class="comment">// // 川请用示例验证运行结果：</span>
<span class="comment">// add(1, 2). then(result =&gt; &#123;</span>
<span class="comment">// console.log(result): // 3</span>
<span class="comment">// add(1, 2, 3, 4) .then(result =&gt; f</span>
<span class="comment">// console.log(result): // 10</span>
<span class="comment">// add(1, 2, 1, 2, 1, 2. 3, 4). then(result =&gt; f</span>
<span class="comment">// console.log(result): // 16</span>
<span class="comment">// &#125;)</span></code></pre>

<h2 id="实现-EventEmitter-模型，实现-on-once-off-emit-方法"><a href="#实现-EventEmitter-模型，实现-on-once-off-emit-方法" class="headerlink" title="实现 EventEmitter 模型，实现 on, once, off, emit 方法"></a>实现 EventEmitter 模型，实现 <code>on</code>, <code>once</code>, <code>off</code>, <code>emit</code> 方法</h2><pre><code class="highlight ts"><span class="keyword">class</span> <span class="title class_">EventEmitter</span> &#123;
  <span class="attr">_event</span>: <span class="title class_">Record</span>&lt;<span class="built_in">string</span>, <span class="title class_">Array</span>&lt;<span class="title class_">Function</span>&gt;&gt;;
  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;
    <span class="variable language_">this</span>.<span class="property">_event</span> = &#123;&#125;;
  &#125;

  <span class="title function_">on</span>(<span class="params"><span class="attr">type</span>: <span class="built_in">string</span>, <span class="attr">callback</span>: <span class="title class_">Function</span></span>) &#123;
    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_event</span>[<span class="keyword">type</span>]) &#123;
      <span class="variable language_">this</span>.<span class="property">_event</span>[<span class="keyword">type</span>].<span class="title function_">push</span>(callback);
    &#125; <span class="keyword">else</span> &#123;
      <span class="variable language_">this</span>.<span class="property">_event</span>[<span class="keyword">type</span>] = [callback];
    &#125;
    <span class="keyword">return</span> <span class="variable language_">this</span>;
  &#125;

  <span class="title function_">once</span>(<span class="params"><span class="attr">type</span>: <span class="built_in">string</span>, <span class="attr">callback</span>: <span class="title class_">Function</span></span>) &#123;
    <span class="keyword">let</span> <span class="title function_">fn</span> = (<span class="params">...<span class="attr">args</span>: <span class="title class_">Array</span>&lt;<span class="built_in">any</span>&gt;</span>) =&gt; &#123;
      callback.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);
      <span class="variable language_">this</span>.<span class="title function_">off</span>(<span class="keyword">type</span>, fn);
    &#125;;
    <span class="variable language_">this</span>.<span class="title function_">on</span>(<span class="keyword">type</span>, fn);
    <span class="keyword">return</span> <span class="variable language_">this</span>;
  &#125;

  <span class="title function_">off</span>(<span class="params"><span class="attr">type</span>: <span class="built_in">string</span>, <span class="attr">callback</span>: <span class="title class_">Function</span></span>) &#123;
    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">_event</span>[<span class="keyword">type</span>]) &#123;
      <span class="variable language_">this</span>.<span class="property">_event</span>[<span class="keyword">type</span>] = <span class="variable language_">this</span>.<span class="property">_event</span>[<span class="keyword">type</span>].<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item !== callback);
    &#125;
    <span class="keyword">return</span> <span class="variable language_">this</span>;
  &#125;

  <span class="title function_">emit</span>(<span class="params"><span class="attr">type</span>: <span class="built_in">string</span></span>) &#123;
    <span class="variable language_">this</span>.<span class="property">_event</span>[<span class="keyword">type</span>].<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="title function_">item</span>());
    <span class="keyword">return</span> <span class="variable language_">this</span>;
  &#125;
&#125;

<span class="keyword">const</span> eventEmitter = <span class="keyword">new</span> <span class="title class_">EventEmitter</span>();

<span class="keyword">let</span> <span class="title function_">handle1</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;click1&quot;</span>);
<span class="keyword">let</span> <span class="title function_">handle2</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;click2&quot;</span>);
<span class="keyword">let</span> <span class="title function_">handle3</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;click3&quot;</span>);
<span class="keyword">let</span> <span class="title function_">handle4</span> = (<span class="params"></span>) =&gt; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;click4&quot;</span>);

eventEmitter.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, handle1);
eventEmitter.<span class="title function_">on</span>(<span class="string">&quot;click&quot;</span>, handle2);
eventEmitter.<span class="title function_">once</span>(<span class="string">&quot;click&quot;</span>, handle3);
eventEmitter.<span class="title function_">emit</span>(<span class="string">&quot;click&quot;</span>);
eventEmitter.<span class="title function_">emit</span>(<span class="string">&quot;click&quot;</span>);</code></pre>

<h3 id="观察者模式，请实现-observable-和-observe-两个函数"><a href="#观察者模式，请实现-observable-和-observe-两个函数" class="headerlink" title="观察者模式，请实现 observable 和 observe 两个函数"></a>观察者模式，请实现 observable 和 observe 两个函数</h3><pre><code class="highlight ts"></code></pre>

<h3 id="字符串隐藏部分内容-阿里"><a href="#字符串隐藏部分内容-阿里" class="headerlink" title="字符串隐藏部分内容 (阿里)"></a>字符串隐藏部分内容 (阿里)</h3><p>实现一个方法，接收一个字符串和一个符号，将字符串中间四位按指定符号隐藏</p>
<ol>
<li>符号无指定时使用星号（*）</li>
<li>接收的字符串小于或等于四位时，返回同样长度的符号串，等同于全隐藏，如 123，隐藏后是***</li>
<li>字符串长度是大于四位的奇数时，如 123456789，隐藏后是 12789，奇数多出来的一位在末尾</li>
</ol>
<p>示例：</p>
<pre><code class="highlight js"><span class="title function_">mask</span>(<span class="string">&quot;alibaba&quot;</span>, <span class="string">&quot;#&quot;</span>); <span class="comment">// a####ba</span>
<span class="title function_">mask</span>(<span class="string">&quot;85022088&quot;</span>); <span class="comment">// 85****88</span>
<span class="title function_">mask</span>(<span class="string">&quot;hello&quot;</span>); <span class="comment">// ****o</span>
<span class="title function_">mask</span>(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;?&quot;</span>); <span class="comment">// ???</span>
<span class="title function_">mask</span>(<span class="string">&quot;阿里巴巴集团&quot;</span>, <span class="string">&quot;?&quot;</span>); <span class="comment">// 阿????团</span></code></pre>

<p>实现</p>
<pre><code class="highlight ts"><span class="keyword">function</span> <span class="title function_">mask</span>(<span class="params">str, char = <span class="string">&quot;*&quot;</span></span>) &#123;
  <span class="keyword">if</span> (str.<span class="property">length</span> &lt;= <span class="number">4</span>) <span class="keyword">return</span> char.<span class="title function_">repeat</span>(str.<span class="property">length</span>);
  <span class="comment">/* 代码实现 */</span>
  <span class="keyword">let</span> result = <span class="string">&quot;&quot;</span>;
  <span class="keyword">let</span> i = <span class="title class_">Math</span>.<span class="title function_">floor</span>(str.<span class="property">length</span> / <span class="number">2</span>) - <span class="number">1</span>;
  <span class="keyword">let</span> j = <span class="title class_">Math</span>.<span class="title function_">floor</span>(str.<span class="property">length</span> / <span class="number">2</span>);
  <span class="keyword">while</span> (result.<span class="property">length</span> !== str.<span class="property">length</span>) &#123;
    <span class="keyword">if</span> (j - i &lt;= <span class="number">4</span>) &#123;
      result = char + result;
      result += char;
    &#125; <span class="keyword">else</span> &#123;
      result = (str[i] || <span class="string">&quot;&quot;</span>) + result;
      result += str[j];
    &#125;
    i--;
    j++;
  &#125;
  <span class="keyword">return</span> result;
&#125;</code></pre>

<p>实现来源：<a href="https://github.com/FrankKai/FrankKai.github.io/issues/245">https://github.com/FrankKai/FrankKai.github.io/issues/245</a></p>
<h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><pre><code class="highlight ts"><span class="keyword">function</span> <span class="title function_">HashMap</span>(<span class="params"></span>) &#123;
  <span class="variable language_">this</span>.<span class="property">map</span> = &#123;&#125;;
&#125;
<span class="title class_">HashMap</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;
  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">key</span>) &#123;
    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);
    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">hasOwnProperty</span>(key)) &#123;
      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">map</span>[key];
    &#125;
    <span class="keyword">return</span> <span class="literal">null</span>;
  &#125;,
  <span class="attr">put</span>: <span class="keyword">function</span> (<span class="params">key, val</span>) &#123;
    <span class="variable language_">this</span>.<span class="property">map</span>[key] = val;
  &#125;,
  <span class="attr">remove</span>: <span class="keyword">function</span> (<span class="params">key</span>) &#123;
    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">map</span>.<span class="title function_">hasOwnProperty</span>(key)) &#123;
      <span class="keyword">let</span> tmp = <span class="variable language_">this</span>.<span class="property">map</span>[key];
      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">map</span>[key];
      <span class="keyword">return</span> tmp;
    &#125;
    <span class="keyword">return</span> <span class="literal">null</span>;
  &#125;,
  <span class="attr">clear</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;
    <span class="variable language_">this</span>.<span class="property">map</span> = &#123;&#125;;
  &#125;,
  <span class="attr">keySet</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;
    <span class="keyword">let</span> _keys = [];
    <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> <span class="variable language_">this</span>.<span class="property">map</span>) &#123;
      _keys.<span class="title function_">push</span>(key);
    &#125;
    <span class="keyword">return</span> _keys;
  &#125;
&#125;;
<span class="title class_">HashMap</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">HashMap</span>;
<span class="keyword">let</span> hashMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>();</code></pre>

<h3 id="LRU"><a href="#LRU" class="headerlink" title="LRU"></a>LRU</h3><h3 id="DFS-深度优先"><a href="#DFS-深度优先" class="headerlink" title="DFS 深度优先"></a>DFS 深度优先</h3><h3 id="广度优先"><a href="#广度优先" class="headerlink" title="广度优先"></a>广度优先</h3>]]></content>
      <categories>
        <category>面试</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown</title>
    <url>/2024/10/01/markdown/</url>
    <content><![CDATA[<h2 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h2><p>使用数字加<code>.</code> 加空格开头</p>
<pre><code class="highlight markdown"><span class="bullet">1.</span> 有序列表 1
<span class="bullet">2.</span> 有序列表 2
<span class="bullet">3.</span> 有序列表 3</code></pre>

<ol>
<li>有序列表 1</li>
<li>有序列表 2</li>
<li>有序列表 3</li>
</ol>
<h2 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h2><p>使用<code>-</code> 加空格开头</p>
<pre><code class="highlight markdown"><span class="bullet">-</span> 无序列表
<span class="bullet">-</span> 无序列表
<span class="bullet">-</span> 无序列表
<span class="bullet">  -</span> 无序列表
<span class="bullet">  -</span> 无序列表</code></pre>

<ul>
<li>无序列表</li>
<li>无序列表</li>
<li>无序列表<ul>
<li>无序列表</li>
<li>无序列表</li>
</ul>
</li>
</ul>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>使用<code>#</code>加空格开头</p>
<h3 id="Heading-H3"><a href="#Heading-H3" class="headerlink" title="Heading H3"></a>Heading H3</h3><h4 id="Heading-H4"><a href="#Heading-H4" class="headerlink" title="Heading H4"></a>Heading H4</h4><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>使用<code>&gt;</code>开头</p>
<pre><code class="highlight markdown"><span class="quote">&gt; 对于美德，我们仅止于认识是不够的，我们还必须努力培养它，运用它，或是采取种种方法，以使我们成为良善之人。 --莎士比亚</span>

<span class="quote">&gt; &gt; 黑夜无论怎样悠长，白昼总会到来。</span>

<span class="quote">&gt; &gt; &gt; To be or not to be,that&#x27;s a question. --莎士比亚</span></code></pre>

<blockquote>
<p>对于美德，我们仅止于认识是不够的，我们还必须努力培养它，运用它，或是采取种种方法，以使我们成为良善之人。 –莎士比亚</p>
</blockquote>
<blockquote>
<blockquote>
<p>黑夜无论怎样悠长，白昼总会到来。</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<blockquote>
<p>To be or not to be,that’s a question. –莎士比亚</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="粗体"><a href="#粗体" class="headerlink" title="粗体"></a>粗体</h2><p>使用<code>**</code>进行包括</p>
<pre><code class="highlight bash">**粗体**</code></pre>

<p><strong>粗体</strong></p>
<h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><p>使用<code>*</code>或<code>_</code>进行包括</p>
<pre><code class="highlight markdown"><span class="emphasis">_斜体_</span></code></pre>

<p><em>斜体</em></p>
<h2 id="斜体加粗"><a href="#斜体加粗" class="headerlink" title="斜体加粗"></a>斜体加粗</h2><p>使用<code>**</code>进行包括</p>
<pre><code class="highlight markdown"><span class="strong">**<span class="emphasis">_斜体_</span>**</span></code></pre>

<p><strong><em>斜体</em></strong></p>
<h2 id="图片"><a href="#图片" class="headerlink" title="图片"></a>图片</h2><p><code>![img alt的值](图片地址)</code></p>
<pre><code class="highlight markdown">![<span class="string">ShineShao</span>](<span class="link">https://avatars2.githubusercontent.com/u/16034259?s=460&amp;u=7caff2589de5d263f44675662d8f1a5b91a1d706&amp;v=4</span>)</code></pre>

<p><img src="https://avatars2.githubusercontent.com/u/16034259?s=460&u=7caff2589de5d263f44675662d8f1a5b91a1d706&v=4" alt="ShineShao"></p>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><p><code>[链接名](链接地址)</code></p>
<pre><code class="highlight markdown">&#123;/_ 链接 <span class="emphasis">_/&#125;</span>
<span class="emphasis">[<span class="string">ShineShao</span>](<span class="link">https://github.com/freeshineit</span>)</span>
<span class="emphasis"></span>
<span class="emphasis">&#123;/_</span> 图片链接 <span class="emphasis">_/&#125;</span>
<span class="emphasis">[<span class="string">![ShineShao</span>](<span class="link">https://avatars2.githubusercontent.com/u/16034259?s=460&amp;u=7caff2589de5d263f44675662d8f1a5b91a1d706&amp;v=4</span>)](<span class="link">https://github.com/freeshineit</span>)</span></code></pre>

<p><a href="https://github.com/freeshineit">ShineShao</a></p>
<p><a href="https://github.com/freeshineit"><img src="https://avatars2.githubusercontent.com/u/16034259?s=460&u=7caff2589de5d263f44675662d8f1a5b91a1d706&v=4" alt="ShineShao"></a></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>使用至少连续的三个<code>-</code></p>
<pre><code class="highlight markdown">---</code></pre>

<hr>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><p>使用<code>~~</code>进行包括</p>
<pre><code class="highlight markdown">~~分割线~~</code></pre>

<p><del>分割线</del></p>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><pre><code class="highlight markdown">| 表头     |   表头   |     表头 |
| :------- | :------: | -------: |
| 内容居左 | 内容居中 | 内容居右 |</code></pre>

<table>
<thead>
<tr>
<th align="left">表头</th>
<th align="center">表头</th>
<th align="right">表头</th>
</tr>
</thead>
<tbody><tr>
<td align="left">单元格</td>
<td align="center">单元格</td>
<td align="right">单元格单元格单元格单元格</td>
</tr>
<tr>
<td align="left">单元格</td>
<td align="center">单元格单元格单元格单元格</td>
<td align="right">单元格</td>
</tr>
</tbody></table>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><pre><code class="highlight go"><span class="keyword">package</span> main;

<span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span>;

<span class="function"><span class="keyword">func</span> <span class="title">main</span> <span class="params">()</span></span> &#123;
  fmt.Println(<span class="string">&quot;Hello World&quot;</span>)
&#125;</code></pre>

<h2 id="diff"><a href="#diff" class="headerlink" title="diff"></a>diff</h2><pre><code class="highlight diff"><span class="addition">+ 123</span>
<span class="deletion">- 123412</span></code></pre>

<h2 id="普通文本"><a href="#普通文本" class="headerlink" title="普通文本"></a>普通文本</h2><p>每个人都会有缺陷，就像被上帝咬过的苹果，有的人缺陷比较大，正是因为上帝特别喜欢他的芬芳。</p>
<h2 id="checkbox"><a href="#checkbox" class="headerlink" title="checkbox"></a>checkbox</h2><pre><code class="highlight markdown"><span class="bullet">-</span> [ ] 任务一 未做任务 <span class="code">`- + 空格 + [ ]`</span>
<span class="bullet">-</span> [x] 任务二 已做任务 <span class="code">`- + 空格 + [x]`</span></code></pre>

<ul>
<li><input disabled="" type="checkbox"> 任务一 未做任务 <code>- + 空格 + [ ]</code></li>
<li><input checked="" disabled="" type="checkbox"> 任务二 已做任务 <code>- + 空格 + [x]</code></li>
</ul>
<h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><pre><code class="highlight markdown">[<span class="symbol">//</span>]: <span class="link"># &quot;注释&quot;</span></code></pre>

<h2 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h2><pre><code class="highlight markdown"><span class="literal">&amp;nbsp;</span> 空格
<span class="literal">&amp;lt;</span> &lt;
<span class="literal">&amp;gt;</span> &gt;
<span class="literal">&amp;amp;</span> &amp;
<span class="literal">&amp;yen;</span> ¥
<span class="literal">&amp;copy;</span> ©
<span class="literal">&amp;reg;</span> ®
<span class="literal">&amp;deg;</span>C °C
<span class="literal">&amp;plusmn;</span> ±
<span class="literal">&amp;times;</span> ×
<span class="literal">&amp;divide;</span> ÷
m<span class="literal">&amp;sup2;</span> m²
m<span class="literal">&amp;sup3;</span> m³</code></pre>

<p>&nbsp;<br>&lt;<br>&gt;<br>&amp;<br>&yen;<br>&copy;<br>&reg;<br>&deg;C<br>&plusmn;<br>&times;<br>&divide;<br>m&sup2;<br>m&sup3;</p>
<h2 id="details"><a href="#details" class="headerlink" title="details"></a>details</h2><pre><code class="highlight markdown"><span class="language-xml"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span>
  <span class="language-xml"><span class="tag">&lt;<span class="name">summary</span>&gt;</span></span>展开<span class="language-xml"><span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span>
  Something small enough to escape casual notice.
<span class="language-xml"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span></code></pre>

<details>
  <summary>展开</summary>
  Something small enough to escape casual notice.
</details>

<h2 id="表情"><a href="#表情" class="headerlink" title="表情"></a>表情</h2><pre><code class="highlight markdown">🐶 👍
😁 🔕</code></pre>

<p>🐶 👍<br>😁 🔕</p>
<h2 id="脚注"><a href="#脚注" class="headerlink" title="脚注"></a>脚注</h2><pre><code class="highlight markdown">使用 <span class="code">`Markdown`</span>[^1]可以效率的书写文档, 直接转换成 <span class="code">`HTML`</span>[^2], 你可以使用 <span class="code">`Typora`</span>[^t] 编辑器进行书写。

[<span class="symbol">^1</span>]: <span class="link">Markdown 是一种纯文本标记语言</span>
[<span class="symbol">^2</span>]: <span class="link">HyperText Markup Language 超文本标记语言</span>
[<span class="string">^t</span>]: [<span class="string">NEW WAY TO READ &amp; WRITE MARKDOWN.</span>](<span class="link">https://www.baidu.com</span>)</code></pre>

<p>使用 <code>Markdown</code>[^1]可以效率的书写文档, 直接转换成 <code>HTML</code>[^2], 你可以使用 <code>Typora</code>[^t] 编辑器进行书写。</p>
<p>[^1]: Markdown 是一种纯文本标记语言<br>[^2]: HyperText Markup Language 超文本标记语言<br>[^t]: <a href="https://www.baidu.com/">NEW WAY TO READ &amp; WRITE MARKDOWN.</a></p>
<p><a href="LICENSE">MIT</a> © <a href="https://github.com/freeshineit">ShineShao</a></p>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Sass 语法</title>
    <url>/2022/10/08/css/scss/</url>
    <content><![CDATA[<h2 id="each-使用说明"><a href="#each-使用说明" class="headerlink" title="@each 使用说明"></a><code>@each</code> 使用说明</h2><p>The <a href="https://sass-lang.com/documentation/at-rules/control/each">@each</a> rule makes it easy to emit styles or evaluate code for each element of a list or each pair in a map. It’s great for repetitive styles that only have a few variations between them. It’s usually written</p>
<h2 id="code"><a href="#code" class="headerlink" title="code"></a>code</h2><pre><code class="highlight scss"><span class="variable">$sizes</span>: <span class="number">40px</span>, <span class="number">50px</span>, <span class="number">80px</span>;
<span class="keyword">@each</span> <span class="variable">$size</span> in <span class="variable">$sizes</span> &#123;
  <span class="selector-class">.icon-</span>#&#123;<span class="variable">$size</span>&#125; &#123;
    <span class="attribute">font-size</span>: <span class="variable">$size</span>;
    <span class="attribute">height</span>: <span class="variable">$size</span>;
    <span class="attribute">width</span>: <span class="variable">$size</span>;
  &#125;
&#125;

# result <span class="selector-class">.icon-40px</span> &#123;
  <span class="attribute">font-size</span>: <span class="number">40px</span>;
  <span class="attribute">height</span>: <span class="number">40px</span>;
  <span class="attribute">width</span>: <span class="number">40px</span>;
&#125;

<span class="selector-class">.icon-50px</span> &#123;
  <span class="attribute">font-size</span>: <span class="number">50px</span>;
  <span class="attribute">height</span>: <span class="number">50px</span>;
  <span class="attribute">width</span>: <span class="number">50px</span>;
&#125;

<span class="selector-class">.icon-80px</span> &#123;
  <span class="attribute">font-size</span>: <span class="number">80px</span>;
  <span class="attribute">height</span>: <span class="number">80px</span>;
  <span class="attribute">width</span>: <span class="number">80px</span>;
&#125;</code></pre>

<pre><code class="highlight scss"><span class="comment">// 数组</span>
<span class="variable">$countries</span>: ((ad, <span class="number">376</span>), (ae, <span class="number">971</span>)), ((az, <span class="number">994</span>), (ba, <span class="number">387</span>));
<span class="variable">$offset</span>: -<span class="number">32px</span>;

<span class="keyword">@each</span> <span class="variable">$arr</span> in <span class="variable">$countries</span> &#123;
  <span class="comment">// get index (form 1)</span>
  <span class="variable">$i</span>: <span class="built_in">index</span>(<span class="variable">$countries</span>, <span class="variable">$arr</span>); <span class="comment">// =&gt; number | null</span>

  <span class="keyword">@each</span> <span class="variable">$c</span> in <span class="variable">$arr</span> &#123;
    <span class="variable">$j</span>: <span class="built_in">index</span>(<span class="variable">$arr</span>, <span class="variable">$c</span>);

    <span class="selector-class">.flag</span><span class="selector-class">.flag-</span>#&#123;<span class="built_in">nth</span>($c, <span class="number">1</span>)&#125; &#123;
      <span class="attribute">background-position</span>: <span class="variable">$offset</span> * (<span class="variable">$j</span> - <span class="number">1</span>) <span class="variable">$offset</span> * (<span class="variable">$i</span> - <span class="number">1</span>);
    &#125;
  &#125;
&#125;

# result <span class="selector-class">.flag</span><span class="selector-class">.flag-ad</span> &#123;
  <span class="attribute">background-position</span>: <span class="number">0px</span> <span class="number">0px</span>;
&#125;
<span class="selector-class">.flag</span><span class="selector-class">.flag-ae</span> &#123;
  <span class="attribute">background-position</span>: -<span class="number">32px</span> <span class="number">0px</span>;
&#125;
<span class="selector-class">.flag</span><span class="selector-class">.flag-az</span> &#123;
  <span class="attribute">background-position</span>: <span class="number">0px</span> -<span class="number">32px</span>;
&#125;
<span class="selector-class">.flag</span><span class="selector-class">.flag-ba</span> &#123;
  <span class="attribute">background-position</span>: -<span class="number">32px</span> -<span class="number">32px</span>;
&#125;</code></pre>]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>Sass</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>Git 常用命令</title>
    <url>/2023/02/18/git/antic/</url>
    <content><![CDATA[<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><pre><code class="highlight shell"><span class="meta prompt_"># </span><span class="language-bash">rebase</span>
git rebase master
<span class="meta prompt_"></span>
<span class="meta prompt_"># </span><span class="language-bash">解决冲突后</span>
git add .
<span class="meta prompt_"></span>
<span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">continue</span></span>
git rebase --continue</code></pre>

<pre><code class="highlight shell"><span class="meta prompt_"># </span><span class="language-bash">discard 丢弃缓存</span>
git reset HEAD
<span class="meta prompt_"></span>
<span class="meta prompt_"># </span><span class="language-bash">丢弃指定文件缓存</span>
git reset HEAD &lt;file&gt;
<span class="meta prompt_"></span>
<span class="meta prompt_"># </span><span class="language-bash">撤销最新的commit</span>
git reset HEAD^
<span class="meta prompt_"></span>
<span class="meta prompt_"># </span><span class="language-bash">修改最新的一次commit 日志</span>
git commit --amend
<span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 或者使用别名</span></span>
git ca
</code></pre>

<h3 id="使用-执行多条命令"><a href="#使用-执行多条命令" class="headerlink" title="使用; 执行多条命令"></a>使用<code>;</code> 执行多条命令</h3><pre><code class="highlight shell">git add .; git status</code></pre>

<h3 id="配置命令别名（Aliases）"><a href="#配置命令别名（Aliases）" class="headerlink" title="配置命令别名（Aliases）"></a>配置命令别名（<a href="https://git-scm.com/book/zh-tw/v2/Git-%E5%9F%BA%E7%A4%8E-Git-Aliases">Aliases</a>）</h3><p>git 默认配置了部分别名，可以使用<code>git config --list</code> 查看</p>
<pre><code class="highlight bash"><span class="comment"># git commit -m</span>
<span class="comment"># git config --global alias.cm commit -m</span>
git cm

<span class="comment"># git log --stat --abbrev-commit</span>
<span class="comment"># git config --global alias.ll log --stat --abbrev-commit</span>
git ll

<span class="comment"># git diff</span>
<span class="comment"># git config --global alias.d diff</span>
git d</code></pre>

<p>配置别名命令</p>
<pre><code class="highlight bash"><span class="comment"># 配置别名命令</span>
git config --global alias.st status

<span class="comment"># 使用 git st 相当于 git status</span>
git st</code></pre>

<p>git log 别名配置</p>
<pre><code class="highlight bash"><span class="comment"># git l</span>
git config --global alias.l <span class="string">&quot;log --graph --all --pretty=format:&#x27;%C(yellow)%h%C(cyan)%d%Creset %s %C(white)- %an, %ar%Creset&#x27;&quot;</span>

<span class="comment"># git ll</span>
git config --global alias.ll <span class="string">&quot;log --stat --abbrev-commit&quot;</span>

<span class="comment"># git lg</span>
git config --global alias.lg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%C(bold white)%h%Creset -%C(bold green)%d%Creset %s %C(bold green)(%cr)%Creset %C(bold blue)&lt;%an&gt;%Creset&#x27; --abbrev-commit --date=relative&quot;</span>

<span class="comment"># git llg</span>
git config --global alias.llg <span class="string">&quot;log --color --graph --pretty=format:&#x27;%C(bold white)%H %d%Creset%n%s%n%+b%C(bold blue)%an &lt;%ae&gt;%Creset %C(bold green)%cr (%ci)&#x27; --abbrev-commit&quot;</span></code></pre>
]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>Tool</tag>
      </tags>
  </entry>
  <entry>
    <title>Golang Sync</title>
    <url>/2023/02/18/golang/sync/</url>
    <content><![CDATA[<h2 id="golang-goroutine-同步操作"><a href="#golang-goroutine-同步操作" class="headerlink" title="golang goroutine 同步操作"></a>golang goroutine 同步操作</h2><h3 id="sync-WaitGroup"><a href="#sync-WaitGroup" class="headerlink" title="sync.WaitGroup"></a><a href="https://golang.org/pkg/sync/#WaitGroup">sync.WaitGroup</a></h3><pre><code class="highlight go"><span class="keyword">package</span> main

<span class="keyword">import</span> (
	<span class="string">&quot;fmt&quot;</span>
	<span class="string">&quot;sync&quot;</span>
	<span class="string">&quot;time&quot;</span>
)

<span class="function"><span class="keyword">func</span> <span class="title">worker</span><span class="params">(i <span class="type">int</span>, wg *sync.WaitGroup)</span></span> &#123;
	fmt.Printf(<span class="string">&quot;sync worker %d starting\n&quot;</span>, i)
	time.Sleep(time.Second)
	fmt.Printf(<span class="string">&quot;sync worker %d done\n&quot;</span>, i)
	<span class="keyword">defer</span> wg.Done()
&#125;

<span class="comment">// sync.WaitGroup</span>
<span class="function"><span class="keyword">func</span> <span class="title">SyncWaitGroup</span><span class="params">()</span></span> &#123;
	<span class="keyword">var</span> wg sync.WaitGroup
	fmt.Println(<span class="string">&quot;this is SyncWaitGroup func&quot;</span>)
	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;
		<span class="comment">// 创建10个 goroutine</span>
		wg.Add(<span class="number">1</span>)
		<span class="keyword">go</span> worker(i, &amp;wg)
	&#125;
	wg.Wait()
&#125;
</code></pre>

<h3 id="Channel"><a href="#Channel" class="headerlink" title="Channel"></a><a href="https://blog.golang.org/pipelines">Channel</a></h3><pre><code class="highlight go"><span class="keyword">package</span> main

<span class="keyword">import</span> (
	<span class="string">&quot;fmt&quot;</span>
	<span class="string">&quot;time&quot;</span>
)

<span class="function"><span class="keyword">func</span> <span class="title">chanWorker</span><span class="params">(i <span class="type">int</span>, done <span class="keyword">chan</span> <span class="type">int</span>)</span></span> &#123;
	fmt.Printf(<span class="string">&quot;chan worker %d starting\n&quot;</span>, i)
	time.Sleep(time.Second)
	fmt.Printf(<span class="string">&quot;chan worker %d done\n&quot;</span>, i)
	done &lt;- i
&#125;

<span class="comment">// chan</span>
<span class="function"><span class="keyword">func</span> <span class="title">Channel</span><span class="params">()</span></span> &#123;
	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="type">int</span>)
	fmt.Println(<span class="string">&quot;this is Channel func&quot;</span>)
	<span class="keyword">for</span> i := <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++ &#123;
		<span class="comment">// 创建10个 goroutine</span>
		<span class="keyword">go</span> chanWorker(i, c)
	&#125;
	&lt;-c
&#125;
</code></pre>
]]></content>
      <categories>
        <category>Golang</category>
      </categories>
      <tags>
        <tag>Golang</tag>
        <tag>goroutine</tag>
        <tag>channel</tag>
      </tags>
  </entry>
  <entry>
    <title>下载github上项目指定的文件夹</title>
    <url>/2022/02/09/github/download/</url>
    <content><![CDATA[<h2 id="node-实现下载指定文件或文件夹"><a href="#node-实现下载指定文件或文件夹" class="headerlink" title="node 实现下载指定文件或文件夹"></a>node 实现下载指定文件或文件夹</h2><p><a href="https://github.com/qqxs/got-github-examples">got-github-examples</a></p>
<ol>
<li>创建存储的文件夹</li>
</ol>
<pre><code class="highlight ts"><span class="keyword">import</span> fs <span class="keyword">from</span> <span class="string">&quot;fs&quot;</span>;

<span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">makeDir</span>(<span class="params"></span>
<span class="params">  <span class="attr">root</span>: <span class="built_in">string</span>,</span>
<span class="params">  options = &#123; recursive: <span class="literal">true</span> &#125;</span>
<span class="params"></span>): <span class="title class_">Promise</span>&lt;<span class="built_in">string</span> | <span class="literal">undefined</span>&gt; &#123;
  <span class="keyword">return</span> fs.<span class="property">promises</span>.<span class="title function_">mkdir</span>(root, options);
&#125;</code></pre>

<ol start="2">
<li>下载指定的文件夹或文件</li>
</ol>
<pre><code class="highlight ts"><span class="keyword">import</span> got <span class="keyword">from</span> <span class="string">&quot;got&quot;</span>;
<span class="keyword">import</span> tar <span class="keyword">from</span> <span class="string">&quot;tar&quot;</span>;
<span class="keyword">import</span> path <span class="keyword">from</span> <span class="string">&quot;path&quot;</span>;
<span class="keyword">import</span> &#123; <span class="title class_">Stream</span> &#125; <span class="keyword">from</span> <span class="string">&quot;stream&quot;</span>;
<span class="keyword">import</span> &#123; promisify &#125; <span class="keyword">from</span> <span class="string">&quot;util&quot;</span>;
<span class="keyword">import</span> &#123; makeDir &#125; <span class="keyword">from</span> <span class="string">&quot;./make-dir&quot;</span>;

<span class="keyword">const</span> pipeline = <span class="title function_">promisify</span>(<span class="title class_">Stream</span>.<span class="property">pipeline</span>);

<span class="comment">// tar extract 内容放置的路径</span>
<span class="keyword">const</span> root = path.<span class="title function_">resolve</span>(<span class="string">&quot;data-fetch-app&quot;</span>);

<span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">downloadExample</span>(<span class="params"></span>) &#123;
  <span class="keyword">await</span> <span class="title function_">makeDir</span>(root);
  process.<span class="title function_">chdir</span>(root);
  <span class="keyword">return</span> <span class="title function_">pipeline</span>(
    got.<span class="title function_">stream</span>(
      <span class="comment">// `https://codeload.github.com/$&#123;user&#125;/$&#123;repo&#125;/tar.gz/$&#123;branch&#125;`</span>
      <span class="comment">// example</span>
      <span class="string">`https://codeload.github.com/qqxs/got-github-examples/tar.gz/main`</span>
    ),
    tar.<span class="title function_">extract</span>(
      &#123;
        <span class="attr">cwd</span>: root,
        <span class="attr">strip</span>: <span class="number">3</span> <span class="comment">// 层级</span>
      &#125;,
      <span class="comment">// [`$&#123;repo&#125;-$&#123;branch&#125;/$&#123;examplePath&#125;`]</span>
      <span class="comment">// example</span>
      [<span class="string">`got-github-examples-main/examples/example01`</span>]
    )
  );
&#125;

<span class="title function_">downloadExample</span>();</code></pre>

<ol start="3">
<li>执行</li>
</ol>
<pre><code class="highlight bash">ts-node index.ts</code></pre>

<h2 id="curl-实现下载指定文件或文件夹"><a href="#curl-实现下载指定文件或文件夹" class="headerlink" title="curl 实现下载指定文件或文件夹"></a>curl 实现下载指定文件或文件夹</h2><pre><code class="highlight bash"><span class="comment"># mkdir my-app &amp;&amp; curl https://codeload.github.com/[user]/[repo]/tar.gz/[branch] | tar -xz -C my-app --strip=2 [repo]-[branch]/[examplePath]</span>
<span class="comment"># 下载github上`freeshineit/next-examples`的 main分支下 `with-typescript-eslint-jest-app` 文件夹下所有的文件和文件夹</span>
<span class="built_in">mkdir</span> my-app &amp;&amp; curl https://codeload.github.com/freeshineit/next-examples/tar.gz/main | tar -xz -C my-app --strip=2 next-examples-main/with-typescript-eslint-jest-app</code></pre>
]]></content>
      <categories>
        <category>Github</category>
      </categories>
      <tags>
        <tag>Github</tag>
        <tag>got</tag>
      </tags>
  </entry>
  <entry>
    <title>Gulp 源码分析</title>
    <url>/2022/11/28/gulp/source/</url>
    <content><![CDATA[<h2 id="Gulp"><a href="#Gulp" class="headerlink" title="Gulp"></a>Gulp</h2><pre><code class="highlight js"><span class="meta">&quot;use strict&quot;</span>;

<span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">&quot;util&quot;</span>);
<span class="comment">// https://www.npmjs.com/package/undertaker</span>
<span class="comment">// undertaker类提供了task，series，parallel，get，set，tree和registry方法</span>
<span class="comment">// undertaker类继承于node核心类eventemitter</span>
<span class="keyword">var</span> <span class="title class_">Undertaker</span> = <span class="built_in">require</span>(<span class="string">&quot;undertaker&quot;</span>);
<span class="comment">// https://www.npmjs.com/package/vinyl-fs</span>
<span class="comment">// vinyl是vitual file formate虚拟文件格式，用于描述一个文件。</span>
<span class="comment">// 它有两个主要的属性，path属性和contents属性。每一个Vinyl实例代表一个独立的文件、目录或者symlink符号连接。</span>
<span class="keyword">var</span> vfs = <span class="built_in">require</span>(<span class="string">&quot;vinyl-fs&quot;</span>);
<span class="comment">// https://www.npmjs.com/package/glob-watcher</span>
<span class="comment">// 观察globs并在更改时执行一个函数，并使用智能默认值取消绑定和排队。</span>
<span class="keyword">var</span> watch = <span class="built_in">require</span>(<span class="string">&quot;glob-watcher&quot;</span>);

<span class="keyword">function</span> <span class="title function_">Gulp</span>(<span class="params"></span>) &#123;
  <span class="comment">// 改变Undertaker的this 指向，指向Gulp</span>
  <span class="title class_">Undertaker</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);

  <span class="comment">// Bind the functions for destructuring</span>
  <span class="variable language_">this</span>.<span class="property">watch</span> = <span class="variable language_">this</span>.<span class="property">watch</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
  <span class="comment">// 任务。 由undertaker类提供</span>
  <span class="variable language_">this</span>.<span class="property">task</span> = <span class="variable language_">this</span>.<span class="property">task</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
  <span class="comment">// 任务顺序依次执行。 由undertaker类提供</span>
  <span class="variable language_">this</span>.<span class="property">series</span> = <span class="variable language_">this</span>.<span class="property">series</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
  <span class="comment">// 将任务功能或组合操作组合成并行执行的较大操作。 由undertaker类提供</span>
  <span class="variable language_">this</span>.<span class="property">parallel</span> = <span class="variable language_">this</span>.<span class="property">parallel</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
  <span class="comment">// https://www.gulpjs.com.cn/docs/api/registry/</span>
  <span class="comment">// 允许将自定义的注册表插入到任务系统中，以期提供共享任务或增强功能。</span>
  <span class="comment">// 由undertaker类提供</span>
  <span class="variable language_">this</span>.<span class="property">registry</span> = <span class="variable language_">this</span>.<span class="property">registry</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
  <span class="comment">// 获取当前任务依赖关系树。 由undertaker类提供</span>
  <span class="variable language_">this</span>.<span class="property">tree</span> = <span class="variable language_">this</span>.<span class="property">tree</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
  <span class="comment">// 由undertaker类提供</span>
  <span class="variable language_">this</span>.<span class="property">lastRun</span> = <span class="variable language_">this</span>.<span class="property">lastRun</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
  <span class="comment">// 创建一个流，用于从文件系统读取 Vinyl 对象。由 vinyl-fs 提供</span>
  <span class="variable language_">this</span>.<span class="property">src</span> = <span class="variable language_">this</span>.<span class="property">src</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
  <span class="comment">// 创建一个用于将 Vinyl 对象写入到文件系统的流。由 vinyl-fs 提供</span>
  <span class="variable language_">this</span>.<span class="property">dest</span> = <span class="variable language_">this</span>.<span class="property">dest</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
  <span class="comment">// 符号链接。 由 vinyl-fs 提供</span>
  <span class="variable language_">this</span>.<span class="property">symlink</span> = <span class="variable language_">this</span>.<span class="property">symlink</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);
&#125;

<span class="comment">// https://nodejs.org/docs/latest/api/util.html#utilinheritsconstructor-superconstructor</span>
<span class="comment">// 继承</span>
<span class="comment">// 已经不建议使用了， 最好使用es6的继承方式  extends</span>
util.<span class="title function_">inherits</span>(<span class="title class_">Gulp</span>, <span class="title class_">Undertaker</span>);

<span class="comment">// https://www.npmjs.com/package/vinyl-fs#options</span>
<span class="comment">// vfs.src(globs[, options])</span>
<span class="title class_">Gulp</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">src</span> = vfs.<span class="property">src</span>;
<span class="comment">// https://www.npmjs.com/package/vinyl-fs#destfolder-options</span>
<span class="comment">// vfs.dest(folder[, options])</span>
<span class="comment">// 将文件夹路径字符串或函数作为第一个参数，将选项对象作为第二个参数。</span>
<span class="comment">// 如果给定一个函数，它将与每个vinyl File对象一起调用，并且必须返回文件夹路径。</span>
<span class="comment">// 返回一个流，该流接受vinyl File对象，将它们写入指定文件夹/cwd中的磁盘，并将它们传递到下游，这样您就可以继续使用管道。</span>
<span class="comment">// 一旦文件写入磁盘后，将尝试确定vinyl File对象的`stat.mode`、`stat.mtime`和`stat.atime`是否与文件系统上的文件不同。</span>
<span class="comment">// 如果它们不同，并且正在运行的进程拥有该文件，则会更新相应的文件系统元数据。</span>
<span class="comment">// 如果它们没有差异或进程不拥有文件，则会自动跳过尝试。</span>
<span class="comment">// 如果文件具有指定目标路径的`symlink`属性，则将创建`symlink`。</span>
<span class="title class_">Gulp</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">dest</span> = vfs.<span class="property">dest</span>;

<span class="comment">// https://www.npmjs.com/package/vinyl-fs#symlinkfolder-options</span>
<span class="comment">// vfs.symlink(folder[, options])</span>
<span class="comment">// 将文件夹路径字符串或函数作为第一个参数，将选项对象作为第二个参数。</span>
<span class="comment">// 如果给定一个函数，它将与每个vinyl File对象一起调用，并且必须返回文件夹路径。</span>
<span class="comment">// 返回一个流，该流接受vinyl File对象，在指定的文件夹/cwd处创建一个`symlink`，并将其传递到下游，这样您就可以继续使用管道传递这些对象。</span>
<span class="title class_">Gulp</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">symlink</span> = vfs.<span class="property">symlink</span>;
<span class="comment">// 在 `glob-watcher` 前做校验和兼容</span>
<span class="comment">//</span>
<span class="title class_">Gulp</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">watch</span> = <span class="keyword">function</span> (<span class="params">glob, opt, task</span>) &#123;
  <span class="keyword">if</span> (
    <span class="keyword">typeof</span> opt === <span class="string">&quot;string&quot;</span> ||
    <span class="keyword">typeof</span> task === <span class="string">&quot;string&quot;</span> ||
    <span class="title class_">Array</span>.<span class="title function_">isArray</span>(opt) ||
    <span class="title class_">Array</span>.<span class="title function_">isArray</span>(task)
  ) &#123;
    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(
      <span class="string">&quot;watching &quot;</span> +
        glob +
        <span class="string">&quot;: watch task has to be &quot;</span> +
        <span class="string">&quot;a function (optionally generated by using gulp.parallel &quot;</span> +
        <span class="string">&quot;or gulp.series)&quot;</span>
    );
  &#125;

  <span class="keyword">if</span> (<span class="keyword">typeof</span> opt === <span class="string">&quot;function&quot;</span>) &#123;
    task = opt;
    opt = &#123;&#125;;
  &#125;

  opt = opt || &#123;&#125;;

  <span class="keyword">var</span> fn;
  <span class="keyword">if</span> (<span class="keyword">typeof</span> task === <span class="string">&quot;function&quot;</span>) &#123;
    fn = <span class="variable language_">this</span>.<span class="title function_">parallel</span>(task);
  &#125;

  <span class="comment">// watch() 方法时通过 `events` 参数进行指定。</span>
  <span class="comment">// 可用的事件有 &#x27;add&#x27;、&#x27;addDir&#x27;、&#x27;change&#x27;、&#x27;unlink&#x27;、&#x27;unlinkDir&#x27;、&#x27;ready&#x27;、&#x27;error&#x27;。</span>
  <span class="comment">// 此外，还有一个 &#x27;all&#x27; 事件，它表示除 &#x27;ready&#x27; 和 &#x27;error&#x27; 之外的所有事件。</span>
  <span class="keyword">return</span> <span class="title function_">watch</span>(glob, opt, fn);
&#125;;

<span class="comment">// Let people use this class from our instance</span>
<span class="title class_">Gulp</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">Gulp</span> = <span class="title class_">Gulp</span>;
<span class="comment">// Gulp 实例</span>
<span class="keyword">var</span> inst = <span class="keyword">new</span> <span class="title class_">Gulp</span>();
<span class="variable language_">module</span>.<span class="property">exports</span> = inst;</code></pre>
]]></content>
      <categories>
        <category>Gulp</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Gulp</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript apply,call和bind</title>
    <url>/2022/10/26/js/apply_call_bind/</url>
    <content><![CDATA[<h2 id="apply-原理"><a href="#apply-原理" class="headerlink" title="apply 原理"></a>apply 原理</h2><p><a href="">apply</a> xxxx</p>
<h2 id="apply-实现"><a href="#apply-实现" class="headerlink" title="apply 实现"></a>apply 实现</h2><pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> *</span>
<span class="comment"> */</span>
<span class="keyword">function</span> <span class="title function_">_apply</span>(<span class="params"><span class="attr">_this</span>: <span class="built_in">any</span>, <span class="attr">args</span>: <span class="built_in">any</span>[]</span>) &#123;&#125;

(<span class="keyword">function</span> (<span class="params"></span>) &#123;
  <span class="comment">// npx ts-node app/typeof.ts</span>
  <span class="comment">// 如果有错 会有打印</span>
  <span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);
&#125;)();</code></pre>

<h2 id="call-原理"><a href="#call-原理" class="headerlink" title="call 原理"></a>call 原理</h2><p><a href="">call</a> xxxx</p>
<h2 id="call-实现"><a href="#call-实现" class="headerlink" title="call 实现"></a>call 实现</h2><pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> *</span>
<span class="comment"> */</span>
<span class="keyword">function</span> <span class="title function_">_call</span>(<span class="params"><span class="attr">_this</span>: <span class="built_in">any</span>, ...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) &#123;&#125;

(<span class="keyword">function</span> (<span class="params"></span>) &#123;
  <span class="comment">// npx ts-node app/typeof.ts</span>
  <span class="comment">// 如果有错 会有打印</span>
  <span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);
&#125;)();</code></pre>

<h2 id="bind-原理"><a href="#bind-原理" class="headerlink" title="bind 原理"></a>bind 原理</h2><p><a href="">bind</a> xxxx</p>
<h2 id="bind-实现"><a href="#bind-实现" class="headerlink" title="bind 实现"></a>bind 实现</h2><pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> *</span>
<span class="comment"> */</span>
<span class="keyword">function</span> <span class="title function_">_bind</span>(<span class="params"><span class="attr">_this</span>: <span class="built_in">any</span>, ...<span class="attr">args</span>: <span class="built_in">any</span>[]</span>) &#123;&#125;

(<span class="keyword">function</span> (<span class="params"></span>) &#123;
  <span class="comment">// npx ts-node app/typeof.ts</span>
  <span class="comment">// 如果有错 会有打印</span>
  <span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);
&#125;)();</code></pre>

<h2 id="apply-call-和-bind-共同点"><a href="#apply-call-和-bind-共同点" class="headerlink" title="apply, call 和 bind 共同点"></a>apply, call 和 bind 共同点</h2><h2 id="apply-call-和-bind-不同点"><a href="#apply-call-和-bind-不同点" class="headerlink" title="apply, call 和 bind 不同点"></a>apply, call 和 bind 不同点</h2>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript instanceof 原理</title>
    <url>/2022/10/26/js/instanceof/</url>
    <content><![CDATA[<h2 id="instanceof-原理"><a href="#instanceof-原理" class="headerlink" title="instanceof 原理"></a>instanceof 原理</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof">instanceof</a> 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> *</span>
<span class="comment"> * 简单模拟 instanceof的实现</span>
<span class="comment"> *</span>
<span class="comment"> * https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof</span>
<span class="comment"> *</span>
<span class="comment"> * instanceof 运算符用于检测构造函数的 prototype 属性是否出现在某个实例对象的原型链上。</span>
<span class="comment"> *</span>
<span class="comment"> * 需要注意的是，如果表达式 obj instanceof Foo 返回 true，则并不意味着该表达式会永远返回 true，</span>
<span class="comment"> * 因为 Foo.prototype 属性的值有可能会改变，改变之后的值很有可能不存在于 obj 的原型链上，</span>
<span class="comment"> * 这时原表达式的值就会成为 false。另外一种情况下，原表达式的值也会改变，就是改变对象 obj 的原型链的情况，虽然在目前的 ES 规范中，</span>
<span class="comment"> * 我们只能读取对象的原型而不能改变它，但借助于非标准的 __proto__ 伪属性，是可以实现的。</span>
<span class="comment"> * 比如执行 obj.__proto__ = &#123;&#125; 之后，obj instanceof Foo 就会返回 false 了。</span>
<span class="comment"> *</span>
<span class="comment"> *</span>
<span class="comment"> * <span class="doctag">@param</span> instance 实例对象</span>
<span class="comment"> * <span class="doctag">@param</span> Func 构造函数</span>
<span class="comment"> * <span class="doctag">@returns</span> <span class="variable">boolean</span></span>
<span class="comment"> */</span>
<span class="keyword">function</span> <span class="title function_">_instanceof</span>(<span class="params"><span class="attr">instance</span>: <span class="built_in">any</span>, <span class="title class_">Func</span>: <span class="built_in">any</span></span>) &#123;
  <span class="keyword">let</span> instance_proto = instance.<span class="property">__proto__</span>;
  <span class="keyword">let</span> <span class="title class_">FuncProto</span> = <span class="title class_">Func</span>.<span class="property"><span class="keyword">prototype</span></span>;

  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;
    <span class="keyword">if</span> (instance_proto === <span class="literal">null</span>) &#123;
      <span class="keyword">return</span> <span class="literal">false</span>;
    &#125;
    <span class="keyword">if</span> (instance_proto === <span class="title class_">FuncProto</span>) &#123;
      <span class="keyword">return</span> <span class="literal">true</span>;
    &#125;

    instance_proto = instance_proto.<span class="property">__proto__</span>;
  &#125;
&#125;

(<span class="keyword">function</span> (<span class="params"></span>) &#123;
  <span class="comment">// npx ts-node app/typeof.ts</span>
  <span class="comment">// 如果有错 会有打印</span>
  <span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);

  <span class="comment">// 定义构造函数</span>
  <span class="keyword">function</span> <span class="title function_">C</span>(<span class="params"></span>) &#123;&#125;
  <span class="keyword">function</span> <span class="title function_">D</span>(<span class="params"></span>) &#123;&#125;

  <span class="keyword">let</span> o = <span class="title function_">new</span> (C <span class="keyword">as</span> <span class="built_in">any</span>)();

  assert.<span class="title function_">equal</span>(o <span class="keyword">instanceof</span> C, <span class="title function_">_instanceof</span>(o, C));
  assert.<span class="title function_">equal</span>(o <span class="keyword">instanceof</span> <span class="title class_">Object</span>, <span class="title function_">_instanceof</span>(o, <span class="title class_">Object</span>));
  assert.<span class="title function_">equal</span>(C.<span class="property"><span class="keyword">prototype</span></span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>, <span class="title function_">_instanceof</span>(C.<span class="property"><span class="keyword">prototype</span></span>, <span class="title class_">Object</span>));

  <span class="comment">//</span>
  C.<span class="property"><span class="keyword">prototype</span></span> = &#123;&#125;;
  <span class="keyword">let</span> o2 = <span class="title function_">new</span> (C <span class="keyword">as</span> <span class="built_in">any</span>)();
  assert.<span class="title function_">equal</span>(o <span class="keyword">instanceof</span> C, <span class="title function_">_instanceof</span>(o2, C));

  <span class="comment">//  false，C.prototype 指向了一个空对象，这个空对象不在 o 的原型链上。</span>
  assert.<span class="title function_">equal</span>(<span class="literal">false</span>, <span class="title function_">_instanceof</span>(o, C));

  D.<span class="property"><span class="keyword">prototype</span></span> = <span class="title function_">new</span> (C <span class="keyword">as</span> <span class="built_in">any</span>)(); <span class="comment">// 继承</span>

  <span class="keyword">let</span> o3 = <span class="title function_">new</span> (D <span class="keyword">as</span> <span class="built_in">any</span>)();

  assert.<span class="title function_">equal</span>(o3 <span class="keyword">instanceof</span> D, <span class="title function_">_instanceof</span>(o3, D));

  <span class="comment">// true 因为 C.prototype 现在在 o3 的原型链上</span>
  assert.<span class="title function_">equal</span>(o3 <span class="keyword">instanceof</span> C, <span class="title function_">_instanceof</span>(o3, C));
&#125;)();</code></pre>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript typeof 原理</title>
    <url>/2022/10/25/js/typeof/</url>
    <content><![CDATA[<h2 id="typeof-原理"><a href="#typeof-原理" class="headerlink" title="typeof 原理"></a>typeof 原理</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/typeof">typeof</a> 运算符返回一个字符串，表示操作数的类型。</p>
<p>javascript 在底层存储变量的时候,会在变量的机器码的低位(前三位) 1-3 位存储其类型信息: 对象:000 (null 是 000， 这也是 null 的 typeof 值为什么是 object 的原因) 浮点数:010 字符串:100 布尔:110 ”。<br><code>typeof</code>直接根据变量值得内存标识符进行判断并返回的是对应字符串形式的值。</p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * 模拟 typeof</span>
<span class="comment"> *</span>
<span class="comment"> * typeof原理：</span>
<span class="comment"> * js 在底层存储变量的时候,会在变量的机器码的低位1-3位存储其类型信息: 对象:000 (null 是 000， 这也是 null 的typeof 值为什么是object的原因) 浮点数:010 字符串:100 布尔:110 ”。</span>
<span class="comment"> * typeof直接根据变量值得内存标识符进行判断并返回的是对应字符串形式的值。</span>
<span class="comment"> *</span>
<span class="comment"> * 实现：</span>
<span class="comment"> * 1. 创建一个枚举对象</span>
<span class="comment"> * 2. 利用 Object.prototype.toString.call 来获取类型</span>
<span class="comment"> * 3. 再对 Number, String, Boolean 对象进行特殊处理</span>
<span class="comment"> *</span>
<span class="comment"> * <span class="doctag">@param</span> target any</span>
<span class="comment"> * <span class="doctag">@returns</span> <span class="variable">string</span></span>
<span class="comment"> */</span>
<span class="keyword">function</span> <span class="title function_">_typeof</span>(<span class="params"><span class="attr">target</span>: <span class="built_in">any</span></span>) &#123;
  <span class="keyword">const</span> <span class="title class_">EnumMap</span> = &#123;
    [<span class="string">&quot;[object Number]&quot;</span>]: <span class="string">&quot;number&quot;</span>,
    [<span class="string">&quot;[object String]&quot;</span>]: <span class="string">&quot;string&quot;</span>,
    [<span class="string">&quot;[object Object]&quot;</span>]: <span class="string">&quot;object&quot;</span>,
    [<span class="string">&quot;[object Array]&quot;</span>]: <span class="string">&quot;object&quot;</span>,
    [<span class="string">&quot;[object Null]&quot;</span>]: <span class="string">&quot;object&quot;</span>,
    [<span class="string">&quot;[object Boolean]&quot;</span>]: <span class="string">&quot;boolean&quot;</span>,
    [<span class="string">&quot;[object Function]&quot;</span>]: <span class="string">&quot;function&quot;</span>,
    [<span class="string">&quot;[object Undefined]&quot;</span>]: <span class="string">&quot;undefined&quot;</span>,
    [<span class="string">&quot;[object Symbol]&quot;</span>]: <span class="string">&quot;symbol&quot;</span>,
    [<span class="string">&quot;[object BigInt]&quot;</span>]: <span class="string">&quot;bigint&quot;</span>,
    [<span class="string">&quot;[object Set]&quot;</span>]: <span class="string">&quot;object&quot;</span>,
    [<span class="string">&quot;[object Map]&quot;</span>]: <span class="string">&quot;object&quot;</span>
  &#125;;

  <span class="keyword">const</span> <span class="attr">key</span>: keyof <span class="keyword">typeof</span> <span class="title class_">EnumMap</span> = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(target);

  <span class="comment">//  这个几个特殊处理一下</span>
  <span class="keyword">if</span> (
    [<span class="string">&quot;[object Number]&quot;</span>, <span class="string">&quot;[object String]&quot;</span>, <span class="string">&quot;[object Boolean]&quot;</span>].<span class="title function_">includes</span>(key) &amp;&amp;
    target <span class="keyword">instanceof</span> <span class="title class_">Object</span>
  ) &#123;
    <span class="keyword">return</span> <span class="string">&quot;object&quot;</span>;
  &#125;
  <span class="keyword">return</span> <span class="title class_">EnumMap</span>[key];
&#125;

<span class="comment">// npx ts-node app/typeof.ts</span>
<span class="comment">// 如果有错 会有打印</span>
<span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">&quot;assert&quot;</span>);
<span class="comment">// test</span>
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="number">12312</span>, <span class="title function_">_typeof</span>(<span class="number">12312</span>));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">12312</span>), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">12312</span>)));
<span class="comment">//</span>
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="literal">true</span>, <span class="title function_">_typeof</span>(<span class="literal">true</span>));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="literal">false</span>, <span class="title function_">_typeof</span>(<span class="literal">false</span>));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>)));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>)));
<span class="comment">//</span>
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="string">&quot;string&quot;</span>, <span class="title function_">_typeof</span>(<span class="string">&quot;string&quot;</span>));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;string&quot;</span>), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;string&quot;</span>)));

<span class="comment">// object</span>
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> &#123;&#125;, <span class="title function_">_typeof</span>(&#123;&#125;));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Object</span>(&#123;&#125;), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">Object</span>(&#123;&#125;)));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;), <span class="title function_">_typeof</span>(<span class="title class_">Object</span>.<span class="title function_">create</span>(&#123;&#125;)));
<span class="comment">//</span>
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> [], <span class="title function_">_typeof</span>([]));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Array</span>(), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">Array</span>()));
<span class="comment">//</span>
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="literal">null</span>, <span class="title function_">_typeof</span>(<span class="literal">null</span>));
<span class="comment">//</span>
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="literal">undefined</span>, <span class="title function_">_typeof</span>(<span class="literal">undefined</span>));

<span class="comment">//</span>
assert.<span class="title function_">equal</span>(
  <span class="title function_">typeof</span> (<span class="function">() =&gt;</span> &#123;&#125;),
  <span class="title function_">_typeof</span>(<span class="function">() =&gt;</span> &#123;&#125;)
);
assert.<span class="title function_">equal</span>(
  <span class="keyword">typeof</span> <span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;,
  <span class="title function_">_typeof</span>(<span class="keyword">function</span> <span class="title function_">a</span>(<span class="params"></span>) &#123;&#125;)
);
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Function</span>(), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">Function</span>()));

<span class="comment">//</span>
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>, <span class="title function_">_typeof</span>(<span class="title class_">Symbol</span>));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="title class_">Symbol</span>(), <span class="title function_">_typeof</span>(<span class="title class_">Symbol</span>()));

<span class="comment">// // bigint</span>
<span class="comment">// assert.equal(typeof 123n, _typeof(123n));</span>
<span class="comment">// assert.equal(typeof new BigInt(123n), _typeof(new BigInt(123n)));</span>

assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Set</span>(), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">Set</span>()));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])));

<span class="comment">//</span>
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Map</span>(), <span class="title function_">_typeof</span>(<span class="keyword">new</span> <span class="title class_">Map</span>()));

<span class="comment">//</span>
<span class="keyword">class</span> <span class="title class_">Point</span> &#123;&#125;

<span class="keyword">let</span> point = <span class="keyword">new</span> <span class="title class_">Point</span>();

assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> <span class="title class_">Point</span>, <span class="title function_">_typeof</span>(<span class="title class_">Point</span>));
assert.<span class="title function_">equal</span>(<span class="keyword">typeof</span> point, <span class="title function_">_typeof</span>(point));</code></pre>]]></content>
      <categories>
        <category>Javascript</category>
      </categories>
      <tags>
        <tag>Javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>react-scripts5 + craco7 + antd4 配置</title>
    <url>/2024/10/01/react/cra5_craco7_antd4/</url>
    <content><![CDATA[<h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><pre><code class="highlight bash">pnpm add less less-loader @craco/craco craco-less babel-plugin-import postcss-px-to-viewport-8-plugin postcss -D</code></pre>

<h2 id="config"><a href="#config" class="headerlink" title="config"></a>config</h2><p>配置支持 antd4 按需加载、定制主题、支持 px 转 vw 和 配置别名</p>
<p>在项目的根目录下新建 <code>craco.config.js</code></p>
<pre><code class="highlight js"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);
<span class="keyword">const</span> <span class="title class_">CracoLessPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;craco-less&quot;</span>);

<span class="variable language_">module</span>.<span class="property">exports</span> = &#123;
  <span class="attr">babel</span>: &#123;
    <span class="comment">// 配置babel插件</span>
    <span class="attr">plugins</span>: [
      [
        <span class="comment">// 安装 babel-plugin-import  https://www.npmjs.com/package/babel-plugin-import</span>
        <span class="comment">// https://4x.ant.design/docs/react/customize-theme-cn#%E6%B2%A1%E6%9C%89%E7%94%9F%E6%95%88%EF%BC%9F</span>
        <span class="string">&quot;import&quot;</span>,
        &#123;
          <span class="attr">libraryName</span>: <span class="string">&quot;antd&quot;</span>,
          <span class="attr">libraryDirectory</span>: <span class="string">&quot;es&quot;</span>,
          <span class="attr">style</span>: <span class="literal">true</span> <span class="comment">// 加载less文件</span>
        &#125;
      ]
    ]
  &#125;,
  <span class="attr">style</span>: &#123;
    <span class="attr">postcss</span>: &#123;
      <span class="attr">mode</span>: <span class="string">&quot;exclude&quot;</span>,
      <span class="attr">loaderOptions</span>: &#123;
        <span class="attr">postcssOptions</span>: &#123;
            <span class="comment">// postcss 需要大于等于 8</span>
          <span class="attr">ident</span>: <span class="string">&quot;postcss&quot;</span>,
          <span class="attr">plugins</span>: [
            [
              <span class="comment">// https://www.npmjs.com/package/postcss-px-to-viewport-8-plugin</span>
              <span class="string">&quot;postcss-px-to-viewport-8-plugin&quot;</span>,
              &#123;
                <span class="attr">unitToConvert</span>: <span class="string">&quot;px&quot;</span>, <span class="comment">// 要转化的单位</span>
                <span class="attr">viewportWidth</span>: <span class="number">375</span>, <span class="comment">// UI设计稿的宽度</span>
                <span class="attr">viewportUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 指定需要转换成的视窗单位，建议使用 rem</span>
                <span class="attr">fontViewportUnit</span>: <span class="string">&quot;vw&quot;</span>, <span class="comment">// 字体使用的视口单位</span>
                <span class="attr">unitPrecision</span>: <span class="number">13</span>, <span class="comment">// 指定`px`转换为视窗单位值的小数后 x位数</span>
                <span class="comment">// propList: 当有些属性的单位我们不希望转换的时候，可以添加在数组后面，并在前面加上!号，如propList: [&quot;*&quot;,&quot;!letter-spacing&quot;],这表示：所有css属性的属性的单位都进行转化，除了letter-spacing的</span>
                <span class="attr">propList</span>: [<span class="string">&quot;*&quot;</span>], <span class="comment">// 指定转换的css属性的单位，*代表全部css属性的单位都进行转换</span>
                <span class="comment">// 转换的黑名单，在黑名单里面的我们可以写入字符串，只要类名包含有这个字符串，就不会被匹配。比如selectorBlackList: [&#x27;wrap&#x27;],它表示形如wrap,my-wrap,wrapper这样的类名的单位，都不会被转换</span>
                <span class="attr">selectorBlackList</span>: [<span class="string">&quot;ignore&quot;</span>], <span class="comment">// 指定不转换为视窗单位的类名，</span>
                <span class="attr">minPixelValue</span>: <span class="number">1</span>, <span class="comment">// 默认值1，小于或等于1px则不进行转换</span>
                <span class="attr">mediaQuery</span>: <span class="literal">true</span>, <span class="comment">// 是否在媒体查询的css代码中也进行转换，默认false</span>
                <span class="attr">replace</span>: <span class="literal">true</span>, <span class="comment">// 是否转换后直接更换属性值</span>
                <span class="attr">exclude</span>: [<span class="regexp">/node_modules/</span>], <span class="comment">// 设置忽略文件，用正则做目录名匹配</span>
                <span class="attr">landscape</span>: <span class="literal">false</span> <span class="comment">// 是否处理横屏情况</span>
              &#125;
            ]
          ]
        &#125;
      &#125;
    &#125;
  &#125;,
  <span class="attr">plugins</span>: [
    &#123;
      <span class="attr">plugin</span>: <span class="title class_">CracoLessPlugin</span>,
      <span class="attr">options</span>: &#123;
        <span class="attr">lessLoaderOptions</span>: &#123;
          <span class="attr">lessOptions</span>: &#123; <span class="comment">// less &gt;= 4, less-loader &gt;= 11</span>
            <span class="attr">modifyVars</span>: &#123;
              <span class="string">&quot;primary-color&quot;</span>: <span class="string">&quot;#1DA57A&quot;</span>,
              <span class="string">&quot;link-color&quot;</span>: <span class="string">&quot;#1DA57A&quot;</span>,
              <span class="string">&quot;border-radius-base&quot;</span>: <span class="string">&quot;2px&quot;</span>
              <span class="comment">// 更改antd 默认的类名前缀，结合 ConfigProvider 使用 https://4x.ant.design/docs/react/customize-theme-variable-cn#%E4%BB%A3%E7%A0%81%E8%B0%83%E6%95%B4</span>
              <span class="comment">// &quot;@ant-prefix&quot;: &quot;custom&quot;</span>
            &#125;,
            <span class="attr">javascriptEnabled</span>: <span class="literal">true</span> <span class="comment">// 允许less文件中使用js表达式</span>
          &#125;
        &#125;
      &#125;
    &#125;
  ],
  <span class="attr">webpack</span>: &#123;
    <span class="comment">// .... 其他配置</span>
    <span class="attr">alias</span>: &#123;
      <span class="comment">// 文件路径别名</span>
      <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>)
    &#125;
  &#125;,
<span class="comment">//   devServer: &#123;&#125;</span>
&#125;;
</code></pre>



<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://create-react-app.dev/">create-react-app</a><br><a href="https://craco.js.org/docs/">@craco&#x2F;craco</a><br><a href="https://4x.ant.design/docs/react/customize-theme-cn">antd4</a><br><a href="https://www.npmjs.com/package/postcss-px-to-viewport-8-plugin">postcss-px-to-viewport-8-plugin</a></p>
<p>备注：由于 <a href="https://www.npmjs.com/package/react-scripts">react-scripts</a> 不在更新维护，推荐编译工具换成 <a href="https://cn.vitejs.dev/guide/">vite</a></p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>javascript 版 React 别名（alias）</title>
    <url>/2021/11/10/react/jsconfig/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>虽然说近几年已经不在写 javascript 版 React 了，一直在用 typescript 但是最近接了个外包，其他小伙伴不太熟 typescript。所以就打算配置一下使用 javascript 环境项目的别名。</p>
<p>使用<a href="https://create-react-app.dev/">create-react-app</a> 创建 javascript 版 React 项目，安装 <a href="https://github.com/gsoft-inc/craco"><code>@craco/craco</code></a>。</p>
<p>具体配置省略，接下来主要说用别名的配置。（想要了解具体配置请参考<a href="https://github.com/gsoft-inc/craco/blob/master/packages/craco/README.md#installation%EF%BC%89">https://github.com/gsoft-inc/craco/blob/master/packages/craco/README.md#installation）</a></p>
<h2 id="craco-中配置-webpack"><a href="#craco-中配置-webpack" class="headerlink" title="craco 中配置 webpack"></a>craco 中配置 webpack</h2><p>在根目录<code>craco.config.js</code>文件中配置别名</p>
<pre><code class="highlight js"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;
  <span class="attr">webpack</span>: &#123;
    <span class="comment">// .... 其他配置</span>
    <span class="attr">alias</span>: &#123;
      <span class="comment">// 文件路径别名</span>
      <span class="string">&quot;@&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src&quot;</span>),
      <span class="string">&quot;@components&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/components&quot;</span>),
      <span class="string">&quot;@utils&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/utils&quot;</span>),
      <span class="string">&quot;@assets&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/assets&quot;</span>),
      <span class="string">&quot;@containers&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/containers&quot;</span>),
      <span class="string">&quot;@hooks&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/hooks&quot;</span>),
      <span class="string">&quot;@store&quot;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;src/store&quot;</span>)
    &#125;
  &#125;
&#125;;</code></pre>

<h2 id="jsconfig-json"><a href="#jsconfig-json" class="headerlink" title="jsconfig.json"></a>jsconfig.json</h2><p>在根目录下新建<code>jsconfig.json</code>, 添加下面内容即可。</p>
<pre><code class="highlight json"><span class="punctuation">&#123;</span>
  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>
    <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;commonjs&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;preserve&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;baseUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;.&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;paths&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>
      <span class="attr">&quot;@components/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/components/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>
      <span class="attr">&quot;@assets/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/assets/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>
      <span class="attr">&quot;@containers/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/containers/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>
      <span class="attr">&quot;@hooks/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/hooks/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>
      <span class="attr">&quot;@store/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/store/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>
      <span class="attr">&quot;@utils/*&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/utils/*&quot;</span><span class="punctuation">]</span>
    <span class="punctuation">&#125;</span>
  <span class="punctuation">&#125;</span><span class="punctuation">,</span>
  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;./src/**/*&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span>
  <span class="attr">&quot;exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;node_modules&quot;</span><span class="punctuation">,</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span> <span class="string">&quot;coverage&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dist&quot;</span><span class="punctuation">,</span> <span class="string">&quot;lib&quot;</span><span class="punctuation">]</span>
<span class="punctuation">&#125;</span></code></pre>

<p>注意 ⚠️： 这个文件有严格的 json 格式要求， 例如最后一项不能有<code>,</code> 等</p>
<p>❤️ ❤️ 还是 ts 香 ❤️ ❤️</p>
]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>docker nginx 部署React项目</title>
    <url>/2021/12/11/react/nginx_deploy/</url>
    <content><![CDATA[<h2 id="docker-nginx"><a href="#docker-nginx" class="headerlink" title="docker nginx"></a>docker nginx</h2><ol>
<li>在项目根目录下新建 <code>docker-compose.yml</code>文件</li>
</ol>
<pre><code class="highlight yml"><span class="attr">version:</span> <span class="string">&quot;2&quot;</span>
<span class="attr">services:</span>
  <span class="comment"># 服务名称</span>
  <span class="attr">nginx:</span>
    <span class="comment"># 镜像:版本</span>
    <span class="attr">image:</span> <span class="string">nginx:latest</span>
    <span class="comment"># 映射容器80端口到本地80端口</span>
    <span class="attr">ports:</span>
      <span class="bullet">-</span> <span class="string">&quot;80:80&quot;</span>
    <span class="comment"># 数据卷 映射本地文件到容器</span>
    <span class="comment"># 这个更新起来特别香</span>
    <span class="attr">volumes:</span>
      <span class="comment"># 映射nginx.conf文件到容器的/etc/nginx/conf.d目录并覆盖default.conf文件</span>
      <span class="bullet">-</span> <span class="string">./nginx.conf:/etc/nginx/conf.d/default.conf</span>
      <span class="comment"># 映射build文件夹到容器的/usr/share/nginx/html文件夹</span>
      <span class="bullet">-</span> <span class="string">./build:/usr/share/nginx/html</span>
    <span class="comment"># 覆盖容器启动后默认执行的命令。</span>
    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">&quot;nginx -g &#x27;daemon off;&#x27;&quot;</span></code></pre>

<p>挂载 nginx 配置</p>
<pre><code class="highlight bash">location / &#123;
    root   /usr/share/nginx/html;
    index  index.html index.htm;
    <span class="comment"># 其作用是按顺序检查文件是否存在，返回第一个找到的文件或文件夹（结尾加斜线表示为文件夹），如果所有的文件或文件夹都找不到，会进行一个内部重定向到最后一个参数。</span>
    try_files <span class="variable">$uri</span> /index.html;
&#125;

<span class="comment"># 接口代理</span>
location ^~ /api/ &#123;
    <span class="comment"># proxy_set_header X-Forwarded-Host $host;</span>
    <span class="comment"># proxy_set_header X-Forwarded-Server $host;</span>
    <span class="comment"># proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span>
    proxy_pass http://xxx.xxxxx.xxxx;
&#125;</code></pre>

<ol start="2">
<li>编译 react 项目</li>
</ol>
<pre><code class="highlight bash">yarn run build</code></pre>

<ol start="3">
<li>生成容器并部署</li>
</ol>
<pre><code class="highlight bash">docker-compose up -d</code></pre>

<ol start="4">
<li><p>本地访问 <code>http://localhost/</code></p>
</li>
<li><p>停止并删除容器 <code>docker-compose down</code></p>
</li>
</ol>
]]></content>
      <categories>
        <category>React</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>React</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>svg 转图片</title>
    <url>/2023/02/24/svg/to_image/</url>
    <content><![CDATA[<h2 id="svg-转图片"><a href="#svg-转图片" class="headerlink" title="svg 转图片"></a>svg 转图片</h2><pre><code class="highlight js"><span class="comment">// 序列化 svg 文件（xml） 转成字符串</span>
<span class="keyword">const</span> svgString = <span class="keyword">new</span> <span class="title class_">XMLSerializer</span>()
  .<span class="title function_">serializeToString</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;svg&#x27;</span>));

<span class="keyword">const</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();
<span class="comment">// svgString svg的xml文件字符串</span>
<span class="keyword">const</span> svg = <span class="keyword">new</span> <span class="title class_">Blob</span>([svgString], &#123;<span class="attr">type</span>: <span class="string">&quot;image/svg+xml;charset=utf-8&quot;</span>&#125;);

<span class="keyword">const</span> domURL = self.<span class="property">URL</span> || self.<span class="property">webkitURL</span> || self;
<span class="keyword">const</span> url = domURL.<span class="title function_">createObjectURL</span>(svg);

img.<span class="property">src</span> = url;

<span class="comment">// append img to body</span>
<span class="comment">// ...</span></code></pre>

]]></content>
      <categories>
        <category>Svg</category>
      </categories>
      <tags>
        <tag>Svg</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac 工具</title>
    <url>/2023/02/18/tools/mac/</url>
    <content><![CDATA[<h2 id="homebrew"><a href="#homebrew" class="headerlink" title="homebrew"></a><a href="https://brew.sh/">homebrew</a></h2><p><a href="https://brew.sh/">homebrew</a> 安装 <code>/bin/bash -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&quot;</code></p>
<ol>
<li><p>安装插件</p>
<ul>
<li>安装 <a href="https://git-scm.com/">git</a></li>
</ul>
<p><code>brew install git</code></p>
<ul>
<li>安装 <a href="https://github.com/wting/autojump">autojump</a></li>
</ul>
<p><code>brew install autojump</code></p>
<p>在 ~&#x2F;.zshrc 中找到<code>plugins</code> 添加 <code>autojump</code>, 注意 ⚠️ 每个插件间用空格隔开</p>
</li>
</ol>
<h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a><a href="https://iterm2.com/">iTerm2</a></h2><ol>
<li><p>安装插件</p>
<ul>
<li>安装 <a href="https://ohmyz.sh/">oh-my-zsh</a> 主题</li>
</ul>
<pre><code class="highlight bash">sh -c <span class="string">&quot;\$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span></code></pre>

<ul>
<li>安装 <a href="https://github.com/zsh-users/zsh-autosuggestions">zsh-autosuggestions</a></li>
</ul>
<pre><code class="highlight bash">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</code></pre>

<p>在 ~&#x2F;.zshrc 中找到<code>plugins</code> 添加 <code>zsh-autosuggestions</code>, 注意 ⚠️ 每个插件间用空格隔开</p>
<ul>
<li>安装 <a href="https://github.com/zsh-users/zsh-syntax-highlighting">zsh-syntax-highlighting</a></li>
</ul>
<pre><code class="highlight bash">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</code></pre>

<p>在 ~&#x2F;.zshrc 中找到<code>plugins</code> 添加 <code>zsh-syntax-highlighting</code>, 注意 ⚠️ 每个插件间用空格隔开</p>
<p>最终结果</p>
<pre><code class="highlight bash">plugins=(
 git
 zsh-syntax-highlighting
 zsh-autosuggestions
 autojump
)</code></pre></li>
</ol>
<h2 id="vim-配置"><a href="#vim-配置" class="headerlink" title="vim 配置"></a>vim 配置</h2><p>可以参考 阮一峰老师的 <a href="https://www.ruanyifeng.com/blog/2018/09/vimrc.html">Vim 配置入门</a></p>
<p>在 <code>~/.vimrc</code> 配置 (如果没有请自建<code>touch ~/.vimrc</code>)</p>
<p>我的基本设置</p>
<pre><code class="highlight bash"><span class="built_in">set</span> number
syntax on
<span class="built_in">set</span> mouse=a
<span class="built_in">set</span> encoding=utf-8
<span class="built_in">set</span> autoindent
<span class="built_in">set</span> tabstop=2
<span class="built_in">set</span> cursorline
<span class="built_in">set</span> ruler
<span class="built_in">set</span> showmatch
<span class="built_in">set</span> incsearch
<span class="built_in">set</span> hlsearch</code></pre>
]]></content>
      <categories>
        <category>Tool</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Mac</tag>
      </tags>
  </entry>
  <entry>
    <title>Yarn workspace</title>
    <url>/2021/08/05/tools/yarn_workspace/</url>
    <content><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p><a href="https://yarnpkg.com/features/workspaces">yarn Workspaces</a> 旨在简化 monorepos 的使用，以更具声明性的方式解决 yarn 链接的主要用例之一。简言之，它们允许您的多个项目一起生活在同一个存储库中，并相互交叉引用——对一个项目的源代码的任何修改都会立即应用于其他项目。</p>
<p>首先，一些词汇：在工作区特性的上下文中，项目是组成工作区的整个目录树（通常是存储库本身）。工作区是由同一项目中您自己的源组成的本地包。最后，工作树是为列出自己的子工作空间的工作空间指定的名称。项目包含一个或多个工作树，这些工作树本身可能包含任意数量的工作空间。任何项目都至少包含一个工作区：根工作区。</p>
<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><ul>
<li>初始化</li>
</ul>
<pre><code class="highlight bash"><span class="built_in">mkdir</span> yarn_workspaces &amp;&amp; <span class="built_in">cd</span> yarn_workspaces

<span class="comment"># 初始化</span>
<span class="comment"># 配置 package.json</span>
yarn init

<span class="built_in">mkdir</span> packages

<span class="comment"># 配置 workspaces</span>
<span class="comment"># &quot;workspaces&quot;: [</span>
<span class="comment">#  &quot;packages/*&quot;</span>
<span class="comment"># ]</span></code></pre>

<ul>
<li>配置根目录下<code>package.json</code></li>
</ul>
<pre><code class="highlight json"><span class="punctuation">&#123;</span>
  <span class="attr">&quot;private&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span>
  <span class="attr">&quot;workspaces&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;packages/*&quot;</span><span class="punctuation">]</span>
<span class="punctuation">&#125;</span></code></pre>

<ul>
<li><p>create common package (components、utils…)</p>
<ul>
<li>初始化 <code>@mono/common</code> package</li>
</ul>
<pre><code class="highlight bash"><span class="built_in">cd</span> packages &amp;&amp; <span class="built_in">mkdir</span> common

yarn init -y

<span class="built_in">mkdir</span> components &amp;&amp; <span class="built_in">mkdir</span> utils</code></pre>

<ul>
<li>配置 <code>package.json</code></li>
</ul>
<pre><code class="highlight json"><span class="punctuation">&#123;</span>
  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;@mono/common&quot;</span><span class="punctuation">,</span>
  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.ts&quot;</span>
<span class="punctuation">&#125;</span></code></pre>

<p>注：由于整个项目都是基于<code>typescript</code>的, 所以 <code>main</code> 就直接指定 <code>index.ts</code>。如果要发布到 npm 上最好还是使用<code>.js</code>。</p>
</li>
<li><p>create mobile web app (html5)</p>
<ul>
<li>初始化 app</li>
</ul>
<pre><code class="highlight bash"><span class="built_in">cd</span> packages &amp;&amp; <span class="built_in">mkdir</span> mobile

<span class="comment"># 创建 index.html</span>
<span class="built_in">touch</span> index.html</code></pre>
</li>
<li><p>create web app (react spa)</p>
<ul>
<li>初始化 app</li>
</ul>
<pre><code class="highlight bash"><span class="built_in">cd</span> packages

<span class="comment"># 创建 react spa app</span>
yarn create react-app my-app --template typescript</code></pre>

<ul>
<li>scripts</li>
</ul>
<p>在项目根目录下<code>package.json</code>中<code>scripts</code>添加下面脚本</p>
<pre><code class="highlight json"><span class="punctuation">&#123;</span>
  <span class="attr">&quot;react-sap-app&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn workspace react-spa-app start&quot;</span>
<span class="punctuation">&#125;</span></code></pre>

<ul>
<li>配置使用本地 package</li>
</ul>
<pre><code class="highlight bash"><span class="comment"># 安装 @craco/craco</span>
<span class="comment"># 在不执行`eject`的条件下注入webpacke等 配置</span>
yarn add @craco/craco -D</code></pre>

<p>在<code>react-spa-app</code>根目录下新建创建<code>craco.config.js</code>文件</p>
<pre><code class="highlight js"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);
<span class="keyword">const</span> &#123; getLoader, loaderByName &#125; = <span class="built_in">require</span>(<span class="string">&quot;@craco/craco&quot;</span>);

<span class="comment">// 配置包括根目录以外文件路径</span>
<span class="comment">// absolutePath 包名 `@mono/common`</span>
<span class="comment">// 在`react-spa-app`项目中可以直接使用 import nameFn from &quot;@mono/common&quot;</span>
<span class="keyword">const</span> absolutePath = path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;../common&quot;</span>);

<span class="variable language_">module</span>.<span class="property">exports</span> = &#123;
  <span class="attr">webpack</span>: &#123;
    <span class="attr">alias</span>: &#123;&#125;,
    <span class="attr">plugins</span>: [],
    <span class="attr">configure</span>: <span class="function">(<span class="params">webpackConfig, &#123; env, paths &#125;</span>) =&gt;</span> &#123;
      <span class="keyword">const</span> &#123; isFound, match &#125; = <span class="title function_">getLoader</span>(
        webpackConfig,
        <span class="title function_">loaderByName</span>(<span class="string">&quot;babel-loader&quot;</span>)
      );
      <span class="keyword">if</span> (isFound) &#123;
        <span class="keyword">const</span> include = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(match.<span class="property">loader</span>.<span class="property">include</span>)
          ? match.<span class="property">loader</span>.<span class="property">include</span>
          : [match.<span class="property">loader</span>.<span class="property">include</span>];
        match.<span class="property">loader</span>.<span class="property">include</span> = include.<span class="property">concat</span>[absolutePath];
      &#125;
      <span class="keyword">return</span> webpackConfig;
    &#125;
  &#125;
&#125;;</code></pre>
</li>
<li><p>create ssr web app (next.js)</p>
<ul>
<li>初始化 ssr web app</li>
</ul>
<pre><code class="highlight bash"><span class="built_in">cd</span> packages

<span class="comment"># 创建 react ssr app</span>
yarn create next-app --example with-typescript nextjs-app</code></pre>

<ul>
<li>scripts</li>
</ul>
<p>在项目根目录下<code>package.json</code>中<code>scripts</code>添加下面脚本</p>
<pre><code class="highlight json"><span class="punctuation">&#123;</span>
  <span class="attr">&quot;react-sap-app&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn workspace nextjs-app dev&quot;</span>
<span class="punctuation">&#125;</span></code></pre>

<ul>
<li>配置使用本地 package</li>
</ul>
<pre><code class="highlight bash"><span class="comment"># 注意⚠️ `next-transpile-modules`版本有很大区别</span>
<span class="comment"># https://www.npmjs.com/package/next-transpile-modules#user-content-compatibility-table</span>
yarn add next-transpile-modules -D</code></pre>

<p>在<code>nextjs-app</code>根目录下新建创建<code>next.config.js</code>文件</p>
<pre><code class="highlight js"><span class="comment">// pass the modules you would like to see transpiled</span>
<span class="keyword">const</span> withTM = <span class="built_in">require</span>(<span class="string">&quot;next-transpile-modules&quot;</span>)([<span class="string">&quot;@mono/common&quot;</span>]);
<span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title function_">withTM</span>();</code></pre>
</li>
<li><p>配置</p>
</li>
<li><p>create service app (koa service)</p>
<ul>
<li>初始化 service app</li>
</ul>
<pre><code class="highlight bash">
<span class="built_in">cd</span> packages &amp;&amp; <span class="built_in">mkdir</span> koa-service-app &amp;&amp; <span class="built_in">cd</span> koa-service-app

yarn init -y

<span class="comment"># 创建服务入口</span>
<span class="built_in">touch</span> server.ts

yarn add typescript ts-node @types/node nodemon -D</code></pre>

<ul>
<li>scripts</li>
</ul>
<p>在<code>koa-service-app</code>目录下<code>package.json</code>中<code>scripts</code>添加下面脚本</p>
<pre><code class="highlight json"><span class="punctuation">&#123;</span>
  <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nodemon --watch &#x27;./**/*.ts&#x27; --watch &#x27;../common/**/*.ts&#x27; --exec &#x27;ts-node&#x27; server.ts&quot;</span>
<span class="punctuation">&#125;</span></code></pre>

<p>在项目根目录下<code>package.json</code>中<code>scripts</code>添加下面脚本</p>
<pre><code class="highlight json"><span class="punctuation">&#123;</span>
  <span class="attr">&quot;koa-service-app&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yarn workspace koa-service-app dev&quot;</span>
<span class="punctuation">&#125;</span></code></pre></li>
</ul>
<h2 id="scripts-说明"><a href="#scripts-说明" class="headerlink" title="scripts 说明"></a>scripts 说明</h2><pre><code class="highlight bash"><span class="comment"># 启动 mobile app</span>
<span class="comment"># 首先已经安装 http-server</span>
http-server -p ./package/mobile

<span class="comment"># 启动 react spa app</span>
yarn workspace react-spa-app start

<span class="comment"># 启动 next.js ssr app</span>
yarn workspace nextjs-app dev

<span class="comment"># 启动 koa node server</span>
yarn workspace koa-service-app start</code></pre>

<h2 id="yarn-workspace-cli"><a href="#yarn-workspace-cli" class="headerlink" title="yarn workspace cli"></a>yarn workspace cli</h2><pre><code class="highlight bash"><span class="comment"># root install dependency xxxxx</span>
yarn add -W -D xxxxx

<span class="comment"># root remove dependency xxxxx</span>
yarn remove -W xxxxx

<span class="comment"># package app1 install dependency xxxx</span>
yarn workspace app1 add xxxx

<span class="comment"># run app1 dev</span>
yarn workspace app1 dev

<span class="comment"># build all package</span>
yarn workspaces run build</code></pre>

<h2 id="提取公共依赖包"><a href="#提取公共依赖包" class="headerlink" title="提取公共依赖包"></a>提取公共依赖包</h2><p>把各个项目中公共依赖提取到根目录<code>package.json</code>中方便统一管理</p>
<pre><code class="highlight json"><span class="punctuation">&#123;</span>
  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>
    <span class="attr">&quot;react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.2&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.2&quot;</span>
  <span class="punctuation">&#125;</span><span class="punctuation">,</span>
  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span>
    <span class="attr">&quot;@craco/craco&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.1.2&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;@types/koa&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.13.3&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;@types/node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^15.12.4&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;@types/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.11&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;@types/react-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^17.0.8&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;koa&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.13.1&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;next&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^11.0.1&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;next-transpile-modules&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.0&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;ts-node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.0.0&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.3.4&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;@testing-library/jest-dom&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.11.4&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;@testing-library/react&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^11.1.0&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;@testing-library/user-event&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^12.1.10&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;@types/jest&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^26.0.15&quot;</span><span class="punctuation">,</span>
    <span class="attr">&quot;react-scripts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;4.0.3&quot;</span>
  <span class="punctuation">&#125;</span>
<span class="punctuation">&#125;</span></code></pre>


<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul>
<li>如果本地新增 package 记得执行 <code>yarn install</code></li>
</ul>
<h2 id="版本管理"><a href="#版本管理" class="headerlink" title="版本管理"></a>版本管理</h2><p>如果想对版本进行管理可以结合 <a href="https://lerna.js.org/">leran</a></p>
<h2 id="github-地址"><a href="#github-地址" class="headerlink" title="github 地址"></a>github 地址</h2><p><a href="https://github.com/qqxs/monorepo">yarn workspaces monorepo</a></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://yarnpkg.com/features/workspaces">yarn workspace</a></li>
<li><a href="https://create-react-app.dev/docs/adding-typescript">create-react-app</a></li>
<li><a href="https://nextjs.org/">next.js</a></li>
<li><a href="https://koajs.com/">koa2</a></li>
<li><a href="https://nodemon.io/">nodemon</a></li>
</ul>
]]></content>
      <categories>
        <category>Yarn</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Yarn</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript 类型操作</title>
    <url>/2020/11/21/typescript/type/</url>
    <content><![CDATA[<h2 id="Ts-类型操作"><a href="#Ts-类型操作" class="headerlink" title="Ts 类型操作"></a>Ts 类型操作</h2><ul>
<li>Partial (部分, 把所有字段转为可选字段)</li>
</ul>
<pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * Make all properties in T optional</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">Partial</span>&lt;T&gt; = &#123;
  [P <span class="keyword">in</span> keyof T]?: T[P];
&#125;;</code></pre>

<p>example：</p>
<pre><code class="highlight ts"><span class="keyword">type</span> partial = &#123;
  <span class="attr">name</span>: <span class="built_in">string</span>;
  <span class="title function_">getName</span>(): <span class="built_in">string</span>;
&#125;;

<span class="comment">/**</span>
<span class="comment"> * TPartial 结果</span>
<span class="comment"> * &#123;</span>
<span class="comment"> *   name?: string</span>
<span class="comment"> *   getName()?: string</span>
<span class="comment"> * &#125;</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">TPartial</span> = <span class="title class_">Partial</span>&lt;partial&gt;;</code></pre>

<ul>
<li>Required (需要, 把所有字段转为必选字段)</li>
</ul>
<pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * Make all properties in T required</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">Required</span>&lt;T&gt; = &#123;
  [P <span class="keyword">in</span> keyof T]-?: T[P];
&#125;;</code></pre>

<p>example:</p>
<pre><code class="highlight ts"><span class="keyword">type</span> required = &#123;
  name?: <span class="built_in">string</span>;
  <span class="title function_">getName</span>(): <span class="built_in">string</span>;
&#125;;

<span class="comment">/**</span>
<span class="comment"> * TRequired 结果</span>
<span class="comment"> * &#123;</span>
<span class="comment"> *   name: string</span>
<span class="comment"> *   getName(): string</span>
<span class="comment"> * &#125;</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">TRequired</span> = <span class="title class_">Required</span>&lt;required&gt;;</code></pre>

<ul>
<li>Readonly (只读，把所有字段转为只读字段)</li>
</ul>
<pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * Make all properties in T readonly</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">Readonly</span>&lt;T&gt; = &#123;
  <span class="keyword">readonly</span> [P <span class="keyword">in</span> keyof T]: T[P];
&#125;;</code></pre>

<p>example:</p>
<pre><code class="highlight ts"><span class="keyword">type</span> <span class="title class_">Treadonly</span> = &#123;
  name?: <span class="built_in">string</span>;
  <span class="title function_">getName</span>(): <span class="built_in">string</span>;
&#125;;

<span class="comment">/**</span>
<span class="comment"> * TReadonly 结果</span>
<span class="comment"> * &#123;</span>
<span class="comment"> *   readonly name?: string</span>
<span class="comment"> *   readonly getName(): string</span>
<span class="comment"> * &#125;</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">TReadonly</span> = <span class="title class_">Readonly</span>&lt;<span class="title class_">Treadonly</span>&gt;;</code></pre>

<ul>
<li>Pick (挑选, 挑选指定的字段)</li>
</ul>
<pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * From T, pick a set of properties whose keys are in the union K</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">Pick</span>&lt;T, K <span class="keyword">extends</span> keyof T&gt; = &#123;
  [P <span class="keyword">in</span> K]: T[P];
&#125;;</code></pre>

<p>example:</p>
<pre><code class="highlight ts"><span class="keyword">type</span> pick = &#123;
  name?: <span class="built_in">string</span>;
  <span class="attr">age</span>: <span class="built_in">number</span>;
  <span class="title function_">getName</span>(): <span class="built_in">string</span>;
&#125;;

<span class="comment">/**</span>
<span class="comment"> * TPick 结果</span>
<span class="comment"> * &#123;</span>
<span class="comment"> *   name?: string</span>
<span class="comment"> *   age: number</span>
<span class="comment"> * &#125;</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">TPick</span> = <span class="title class_">Pick</span>&lt;pick, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span>&gt;;</code></pre>

<ul>
<li>Record(记录,将 K 中所有的属性的值转化为 T 类型)</li>
</ul>
<pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * Construct a type with a set of properties K of type T</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">Record</span>&lt;K <span class="keyword">extends</span> keyof <span class="built_in">any</span>, T&gt; = &#123;
  [P <span class="keyword">in</span> K]: T;
&#125;;</code></pre>

<p>example:</p>
<pre><code class="highlight ts"><span class="keyword">type</span> record = &#123;
  name?: <span class="built_in">string</span>;
  <span class="attr">age</span>: <span class="built_in">number</span>;
  <span class="title function_">getName</span>(): <span class="built_in">string</span>;
&#125;;

<span class="comment">/**</span>
<span class="comment"> * TRecord 结果</span>
<span class="comment"> * &#123;</span>
<span class="comment"> *   name: string</span>
<span class="comment"> *   age: string</span>
<span class="comment"> *   getName: string</span>
<span class="comment"> * &#125;</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">TRecord</span> = <span class="title class_">Record</span>&lt;keyof record, <span class="built_in">string</span>&gt;;

<span class="comment">/**</span>
<span class="comment"> * Ta 结果</span>
<span class="comment"> * &#123;</span>
<span class="comment"> *   a: number</span>
<span class="comment"> *   b: number</span>
<span class="comment"> *   c: number</span>
<span class="comment"> *   1: number</span>
<span class="comment"> * &#125;</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">Ta</span> = <span class="title class_">Record</span>&lt;<span class="string">&quot;a&quot;</span> | <span class="string">&quot;b&quot;</span> | <span class="string">&quot;c&quot;</span> | <span class="number">1</span>, <span class="built_in">number</span>&gt;;</code></pre>

<ul>
<li>Exclude(排除,从 T 中排除那些可分配给 U 的类型，)</li>
</ul>
<pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * Exclude from T those types that are assignable to U</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">Exclude</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? <span class="built_in">never</span> : T;</code></pre>

<p>example:</p>
<pre><code class="highlight ts"><span class="keyword">type</span> T = <span class="title class_">Exclude</span>&lt;<span class="number">1</span> | <span class="number">2</span>, <span class="number">1</span> | <span class="number">3</span>&gt;; <span class="comment">// -&gt; 2</span></code></pre>

<ul>
<li>Extract(提取,从 T 中提取可分配给 U 的类型， 交集)</li>
</ul>
<pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * Extract from T those types that are assignable to U</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">Extract</span>&lt;T, U&gt; = T <span class="keyword">extends</span> U ? T : <span class="built_in">never</span>;</code></pre>

<p>example:</p>
<pre><code class="highlight ts"><span class="keyword">type</span> T = <span class="title class_">Extract</span>&lt;<span class="number">1</span> | <span class="number">2</span>, <span class="number">1</span> | <span class="number">3</span>&gt;; <span class="comment">// -&gt; 1</span></code></pre>

<ul>
<li>Omit (删去, 构造一个除 K 类型外具有 T 属性的类型。)</li>
</ul>
<pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * Construct a type with the properties of T except for those in type K.</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">Omit</span>&lt;T, K <span class="keyword">extends</span> keyof <span class="built_in">any</span>&gt; = <span class="title class_">Pick</span>&lt;T, <span class="title class_">Exclude</span>&lt;keyof T, K&gt;&gt;;</code></pre>

<p>example:</p>
<pre><code class="highlight ts"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;
  <span class="attr">name</span>: <span class="built_in">string</span>;
  <span class="attr">age</span>: <span class="built_in">number</span>;
  <span class="attr">location</span>: <span class="built_in">string</span>;
&#125;

<span class="comment">/**</span>
<span class="comment"> * OmitPerson 结果</span>
<span class="comment"> * &#123;</span>
<span class="comment"> *   location: string</span>
<span class="comment"> * &#125;</span>
<span class="comment"> */</span>
<span class="keyword">type</span> <span class="title class_">OmitPerson</span> = <span class="title class_">Omit</span>&lt;<span class="title class_">Person</span>, <span class="string">&quot;name&quot;</span> | <span class="string">&quot;age&quot;</span>&gt;;</code></pre>

<ul>
<li>数组</li>
</ul>
<pre><code class="highlight ts"><span class="comment">/** arr1Example 中只可以使用`string`类型填充 */</span>
<span class="keyword">type</span> arr1 = <span class="built_in">string</span>[]; <span class="comment">// 建议使用[]</span>
<span class="keyword">const</span> <span class="attr">arr1Example</span>: arr1 = [<span class="string">&quot;123&quot;</span>, <span class="string">&quot;23454&quot;</span>];

<span class="comment">/** arr2Example 中只可以使用[`string`,`number`]类型填充，必须按顺序填充, 个数也有限制 */</span>
<span class="keyword">type</span> arr2 = [<span class="built_in">string</span>, <span class="built_in">number</span>];
<span class="keyword">const</span> <span class="attr">arr2Example</span>: arr2 = [<span class="string">&quot;0&quot;</span>, <span class="number">1</span>];

<span class="comment">/** arr3Example 中只可以使用`string`或`number`类型填充，没有顺序要求 */</span>
<span class="keyword">type</span> arr3 = (<span class="built_in">string</span> | <span class="built_in">number</span>)[];
<span class="keyword">const</span> <span class="attr">arr3Example</span>: arr3 = [<span class="number">0</span>, <span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="number">3</span>, <span class="number">4</span>];</code></pre>

<ul>
<li>对象</li>
</ul>
<pre><code class="highlight ts"><span class="keyword">interface</span> <span class="title class_">Persion</span>&lt;T&gt; &#123;
  [<span class="attr">key</span>: T]: T;
&#125;</code></pre>

<ul>
<li><p>extends</p>
</li>
<li><p>keyof (对于任何类型 <code>T</code>， <code>keyof T</code>的结果为 <code>T</code>上已知的公共属性名的联合)</p>
</li>
</ul>
<pre><code class="highlight ts"><span class="keyword">interface</span> <span class="title class_">Person</span> &#123;
  <span class="attr">name</span>: <span class="built_in">string</span>;
  <span class="attr">age</span>: <span class="built_in">number</span>;
&#125;

<span class="keyword">type</span> p = keyof <span class="title class_">Person</span>; <span class="comment">// -&gt; p = &#x27;name&#x27; | &#x27;age&#x27;</span></code></pre>

<ul>
<li>typeof</li>
</ul>
<pre><code class="highlight ts"></code></pre>

<ul>
<li>交叉类型 (交叉类型是将多个类型合并为一个类型)</li>
</ul>
<pre><code class="highlight ts"><span class="keyword">interface</span>;</code></pre>

<ul>
<li>联合类型 (联合类型表示一个值可以是几种类型之一,用竖线<code>｜</code>分隔每个类型)</li>
</ul>
<pre><code class="highlight ts"><span class="keyword">function</span> <span class="title function_">getNum</span>(<span class="params"><span class="attr">num</span>: <span class="built_in">number</span> | <span class="built_in">string</span></span>): <span class="built_in">number</span> &#123;
  <span class="keyword">return</span> +num;
&#125;</code></pre>

<ul>
<li>索引类型</li>
</ul>
<pre><code class="highlight ts"></code></pre>

<ul>
<li>映射类型</li>
</ul>
<pre><code class="highlight ts"></code></pre>

<ul>
<li>@4.1</li>
</ul>
<pre><code class="highlight ts">  <span class="comment">// @4.1</span>
<span class="keyword">type</span> <span class="title class_">Getters</span>&lt;T&gt; = &#123;
  <span class="comment">//</span>
  [K <span class="keyword">in</span> keyof T <span class="keyword">as</span> <span class="string">`get<span class="subst">$&#123;capitalize K&#125;</span>`</span>]: <span class="function">() =&gt;</span> T[K]
&#125;

<span class="keyword">interface</span> <span class="title class_">Person</span> &#123;
	<span class="attr">name</span>: <span class="built_in">string</span>;
	<span class="attr">age</span>: <span class="built_in">number</span>;
	<span class="attr">location</span>: <span class="built_in">string</span>;
&#125;

<span class="comment">/**</span>
<span class="comment">* LazyPerson 结果</span>
<span class="comment">* &#123;</span>
<span class="comment">*   name: string</span>
<span class="comment">*   age: number</span>
<span class="comment">*   location: string</span>
<span class="comment">*   getName: () =&gt; string</span>
<span class="comment">*   getAge: () =&gt; number</span>
<span class="comment">*   getLocation: () =&gt; string</span>
<span class="comment">* &#125;</span>
<span class="comment">*/</span>
<span class="keyword">type</span> <span class="title class_">LazyPerson</span> = <span class="title class_">Getters</span>&lt;<span class="title class_">Person</span>&gt;;</code></pre>

<ul>
<li><p>React 中的类型约束</p>
<ul>
<li>FC (函数组件类型)</li>
</ul>
<pre><code class="highlight tsx"><span class="keyword">interface</span> <span class="title class_">FunctionComponent</span>&lt;P = &#123;&#125;&gt; &#123;
  (<span class="attr">props</span>: <span class="title class_">PropsWithChildren</span>&lt;P&gt;, context?: <span class="built_in">any</span>): <span class="title class_">ReactElement</span>&lt;<span class="built_in">any</span>, <span class="built_in">any</span>&gt; | <span class="literal">null</span>;
  propTypes?: <span class="title class_">WeakValidationMap</span>&lt;P&gt;;
  contextTypes?: <span class="title class_">ValidationMap</span>&lt;<span class="built_in">any</span>&gt;;
  defaultProps?: <span class="title class_">Partial</span>&lt;P&gt;;
  displayName?: <span class="built_in">string</span>;
&#125;

<span class="keyword">type</span> <span class="variable constant_">FC</span>&lt;P = &#123;&#125;&gt; = <span class="title class_">FunctionComponent</span>&lt;P&gt;;

<span class="comment">// 具体使用</span>
<span class="keyword">interface</span> <span class="title class_">IProps</span> &#123;&#125;
<span class="keyword">const</span> <span class="title class_">App</span>: <span class="variable constant_">FC</span>&lt;<span class="title class_">IProps</span>&gt; = <span class="function"><span class="params">props</span> =&gt;</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;props.children&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</code></pre>

<ul>
<li><p>useState</p>
<p>React 中使用<code>useState</code>方法去设置 state</p>
</li>
</ul>
<pre><code class="highlight tsx"><span class="keyword">function</span> useState&lt;S&gt;(
  <span class="attr">initialState</span>: S | (<span class="function">() =&gt;</span> S)
): [S, <span class="title class_">Dispatch</span>&lt;<span class="title class_">SetStateAction</span>&lt;S&gt;&gt;];</code></pre></li>
</ul>
]]></content>
      <categories>
        <category>Typescript</category>
      </categories>
      <tags>
        <tag>Typescript</tag>
      </tags>
  </entry>
  <entry>
    <title>webpack5 配置项</title>
    <url>/2022/11/13/webpack/config/</url>
    <content><![CDATA[<h2 id="webpack5-配置项"><a href="#webpack5-配置项" class="headerlink" title="webpack5 配置项"></a>webpack5 配置项</h2><p>webpack <a href="https://sourcegraph.com/github.com/webpack/webpack@main/-/blob/declarations/WebpackOptions.d.ts">WebpackOptions</a></p>
<p><a href="https://webpack.docschina.org/configuration/other-options">https://webpack.docschina.org/configuration/other-options</a></p>
<pre><code class="highlight ts"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">WebpackOptions</span> &#123;
  <span class="comment">/**</span>
<span class="comment">   * 设置`require.amd`和`define.amd`的值。或者禁用AMD支持。</span>
<span class="comment">   */</span>
  amd?: <span class="literal">false</span> | &#123; [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">any</span> &#125;;
  <span class="comment">/**</span>
<span class="comment">   * 在第一个错误出现时抛出失败结果，而不是容忍它;  true: 将会致使 webpack 在发现错误时尽快退出。</span>
<span class="comment">   */</span>
  bail?: <span class="built_in">boolean</span>;
  <span class="comment">/**</span>
<span class="comment">   * 缓存生成的 modules 和 chunks，以提高多个增量构建的性能。</span>
<span class="comment">   */</span>
  cache?: <span class="built_in">boolean</span> | <span class="title class_">MemoryCacheOptions</span> | <span class="title class_">FileCacheOptions</span>;
  <span class="comment">/**</span>
<span class="comment">   * 基本目录（绝对路径！）用于解析`entry`选项。如果设置了`output.pathinfo`，则包含的pathinfo将缩短到此目录。</span>
<span class="comment">   */</span>
  context?: <span class="built_in">string</span>; <span class="comment">// Context;</span>
  <span class="comment">/**</span>
<span class="comment">   * 对要依赖的其他配置的引用。</span>
<span class="comment">   */</span>
  dependencies?: <span class="built_in">string</span>[]; <span class="comment">// Dependencies;</span>
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.js.org/configuration/dev-server/</span>
<span class="comment">   * webpack-dev-server的选项</span>
<span class="comment">   */</span>
  devServer?: <span class="title class_">DevServer</span>;
  <span class="comment">/**</span>
<span class="comment">   * 用于增强调试的开发工具 (false | eval | [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map).</span>
<span class="comment">   */</span>
  devtool?: <span class="title class_">DevTool</span>;
  <span class="comment">/**</span>
<span class="comment">   * 编译的入口点</span>
<span class="comment">   */</span>
  entry?: <span class="title class_">Entry</span>;
  <span class="comment">/**</span>
<span class="comment">   * 启用/禁用实验（具有relax-SemVer兼容性的实验功能）</span>
<span class="comment">   */</span>
  experiments?: <span class="title class_">Experiments</span>;
  <span class="comment">/**</span>
<span class="comment">   * 指定不应该由webpack解析，但应该成为结果包的依赖项的依赖项。依赖关系的类型取决于`output.libraryTarget`。</span>
<span class="comment">   */</span>
  externals?: <span class="title class_">Externals</span>;
  <span class="comment">/**</span>
<span class="comment">   * 为特定目标启用外部预设</span>
<span class="comment">   */</span>
  externalsPresets?: <span class="title class_">ExternalsPresets</span>;
  <span class="comment">/**</span>
<span class="comment">   * 指定外部的默认类型（&#x27;amd*&#x27;、&#x27;umd*&#x27;，&#x27;system&#x27;和&#x27;jsonp&#x27;取决于设置为相同值的output.libraryTarget）。</span>
<span class="comment">   */</span>
  externalsType?: <span class="title class_">ExternalsType</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/other-options/#ignorewarnings</span>
<span class="comment">   * 忽略特定警告</span>
<span class="comment">   */</span>
  ignoreWarnings?: <span class="title class_">IgnoreWarnings</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/other-options/#infrastructurelogging</span>
<span class="comment">   * 用于基础设施水平的日志选项</span>
<span class="comment">   */</span>
  infrastructureLogging?: <span class="title class_">InfrastructureLogging</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/other-options/#loader</span>
<span class="comment">   * loader上下文中可用的自定义值</span>
<span class="comment">   */</span>
  loader?: <span class="title class_">Loader</span>;
  <span class="comment">/**</span>
<span class="comment">   * 启用生产优化或开发提示</span>
<span class="comment">   */</span>
  mode?: <span class="string">&quot;development&quot;</span> | <span class="string">&quot;production&quot;</span> | <span class="string">&quot;none&quot;</span>;
  <span class="comment">/**</span>
<span class="comment">   * 影响正常模块的选项（`NormalModuleFactory`）</span>
<span class="comment">   */</span>
  <span class="variable language_">module</span>?: <span class="title class_">ModuleOptions</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/other-options/#name</span>
<span class="comment">   * 配置的名称。加载多个配置时使用。</span>
<span class="comment">   */</span>
  name?: <span class="built_in">string</span>; <span class="comment">//Name;</span>
  <span class="comment">/**</span>
<span class="comment">   * 包括各种节点填充的polyfill或mock</span>
<span class="comment">   */</span>
  node?: <span class="title class_">Node</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/optimization/#root</span>
<span class="comment">   * 启用/禁用集成优化</span>
<span class="comment">   */</span>
  optimization?: <span class="title class_">Optimization</span>;
  <span class="comment">/**</span>
<span class="comment">   * Options affecting the output of the compilation. `output` options tell webpack how to write the compiled files to disk.</span>
<span class="comment">   * 影响编译输出的选项. `output`选项告诉`webpack`如何将编译后的文件写入磁盘。</span>
<span class="comment">   */</span>
  output?: <span class="title class_">Output</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/other-options/#parallelism</span>
<span class="comment">   * 编译中并行处理的模块数</span>
<span class="comment">   * 默认 100</span>
<span class="comment">   */</span>
  parallelism?: <span class="built_in">number</span>; <span class="comment">//Parallelism;</span>
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/performance/#root</span>
<span class="comment">   * web性能建议的配置</span>
<span class="comment">   */</span>
  performance?: <span class="title class_">Performance</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/plugins/#plugins</span>
<span class="comment">   * 向编译器添加其他插件.</span>
<span class="comment">   *</span>
<span class="comment">   * https://sourcegraph.com/github.com/webpack/webpack-cli/-/blob/packages/webpack-cli/src/plugins/CLIPlugin.ts?L11</span>
<span class="comment">   * webpack-cli 会默认在数组的最前面插入 CLIPlugin 的实例  (why ??) 主要是在控制台输出内容（打印日志）</span>
<span class="comment">   */</span>
  plugins?: <span class="title class_">Plugins</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/other-options/#profile</span>
<span class="comment">   * 捕获每个模块的计时信息</span>
<span class="comment">   */</span>
  profile?: <span class="title class_">Profile</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/other-options/#recordsinputpath</span>
<span class="comment">   * 将编译器状态存储到json文件中, 指定读取最后一条记录的文件的名称。这可以用来重命名一个记录文件</span>
<span class="comment">   */</span>
  recordsInputPath?: <span class="built_in">string</span> | <span class="literal">false</span>; <span class="comment">// RecordsInputPath;</span>
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/other-options/#recordsoutputpath</span>
<span class="comment">   * 从json文件加载编译器状态</span>
<span class="comment">   */</span>
  recordsOutputPath?: <span class="built_in">string</span> | <span class="literal">false</span>; <span class="comment">// RecordsOutputPath;</span>
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/other-options/#recordspath</span>
<span class="comment">   * 开启这个选项可以生成一个 JSON 文件，其中含有 webpack 的 &quot;records&quot; 记录 - 即「用于存储跨多次构建(across multiple builds)的模块标识符」的数据片段。可以使用此文件来跟踪在每次构建之间的模块变化。只要简单的设置一下路径,就可以生成这个 JSON 文件</span>
<span class="comment">   */</span>
  recordsPath?: <span class="title class_">RecordsPath</span>;
  <span class="comment">/**</span>
<span class="comment">   * 解析器选项</span>
<span class="comment">   */</span>
  resolve?: <span class="title class_">Resolve</span>;
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/resolve/#resolveloader</span>
<span class="comment">   * 解析loaders时解析程序的选项</span>
<span class="comment">   */</span>
  resolveLoader?: <span class="title class_">ResolveLoader</span>;
  <span class="comment">/**</span>
<span class="comment">   * 影响文件系统快照创建和验证方式的选</span>
<span class="comment">   */</span>
  snapshot?: <span class="title class_">SnapshotOptions</span>;
  <span class="comment">/**</span>
<span class="comment">   * 统计选项对象或预设名称</span>
<span class="comment">   * 默认: &#123;colors:false,preset:&#x27;normal&#x27;&#125;</span>
<span class="comment">   */</span>
  stats?: <span class="title class_">StatsValue</span>;
  <span class="comment">/**</span>
<span class="comment">   * 要构建的环境。尽可能为所有用户构建一系列环境</span>
<span class="comment">   */</span>
  target?: <span class="built_in">string</span> | <span class="literal">false</span> | <span class="built_in">string</span>[]; <span class="comment">// Target;</span>
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/watch#root</span>
<span class="comment">   * 启用 Watch 模式，该模式将在文件更改时重建</span>
<span class="comment">   * Compiler 支持可以监控文件系统的 监听(watching) 机制，并且在文件修改时重新编译。</span>
<span class="comment">   * 当处于监听模式(watch mode)时， compiler 会触发诸如 watchRun, watchClose 和 invalid 等额外的事件</span>
<span class="comment">   *</span>
<span class="comment">   */</span>
  watch?: <span class="built_in">boolean</span>; <span class="comment">// Watch;</span>
  <span class="comment">/**</span>
<span class="comment">   * https://webpack.docschina.org/configuration/watch#watchoptions</span>
<span class="comment">   * 一组用来定制 watch 模式的选项</span>
<span class="comment">   */</span>
  watchOptions?: <span class="title class_">WatchOptions</span>;
&#125;</code></pre>

<h2 id="loader"><a href="#loader" class="headerlink" title="loader"></a>loader</h2><pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * Custom values available in the loader context.</span>
<span class="comment"> */</span>
<span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">Loader</span> &#123;
  [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;
&#125;</code></pre>

<h2 id="plugin"><a href="#plugin" class="headerlink" title="plugin"></a>plugin</h2><pre><code class="highlight ts"><span class="comment">/**</span>
<span class="comment"> * 向编译器添加其他插件</span>
<span class="comment"> */</span>
<span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">Plugins</span> = (<span class="title class_">WebpackPluginInstance</span> | <span class="title class_">WebpackPluginFunction</span>)[];

<span class="comment">/**</span>
<span class="comment"> * 插件实例</span>
<span class="comment"> */</span>
<span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">WebpackPluginInstance</span> &#123;
  <span class="comment">/**</span>
<span class="comment">   * The run point of the plugin, required method.</span>
<span class="comment">   */</span>
  <span class="attr">apply</span>: <span class="function">(<span class="params"><span class="attr">compiler</span>: <span class="keyword">import</span>(<span class="string">&quot;../lib/Compiler&quot;</span>)</span>) =&gt;</span> <span class="built_in">void</span>;
  [<span class="attr">k</span>: <span class="built_in">string</span>]: <span class="built_in">any</span>;
&#125;

<span class="comment">/**</span>
<span class="comment"> * Function acting as plugin.</span>
<span class="comment"> */</span>
<span class="keyword">export</span> <span class="keyword">type</span> <span class="title class_">WebpackPluginFunction</span> = <span class="function">(<span class="params"></span></span>
<span class="params"><span class="function">  <span class="attr">this</span>: <span class="keyword">import</span>(<span class="string">&quot;../lib/Compiler&quot;</span>),</span></span>
<span class="params"><span class="function">  <span class="attr">compiler</span>: <span class="keyword">import</span>(<span class="string">&quot;../lib/Compiler&quot;</span>)</span></span>
<span class="params"><span class="function"></span>) =&gt;</span> <span class="built_in">void</span>;</code></pre>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Tool</tag>
        <tag>Webpack5</tag>
      </tags>
  </entry>
  <entry>
    <title>tapable 使用随笔</title>
    <url>/2022/11/28/webpack/tapable/</url>
    <content><![CDATA[<h2 id="tapable"><a href="#tapable" class="headerlink" title="tapable"></a>tapable</h2><p>The <a href="https://github.com/webpack/tapable">tapable</a> package expose many Hook classes, which can be used to create hooks for plugins.</p>
<p><code>tapable</code> 是一个发布订阅模式的实现，它提供了很多应对业务的 <code>hooks</code> 实现和抽象。主要分为两大类同步和异步。</p>
<h2 id="Base-Hooks"><a href="#Base-Hooks" class="headerlink" title="Base Hooks"></a>Base Hooks</h2><ul>
<li><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/Hook.js?L25:1">Hooks</a></li>
</ul>
<p>继承 <code>Hooks</code> 的类需要自己实现<code>compile</code>抽象方法。</p>
<ul>
<li><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L7:1">HookCodeFactory</a></li>
</ul>
<p>继承<code>HookCodeFactory</code>类需要实现抽象方法<code>content</code>, 返回 <code>call</code>或<code>callAsync</code>或<code>promise</code> 的函数体的实现的代码字符串， 然后使用 <code>Function</code> 生成一个<code>call</code>或<code>callAsync</code>或<code>promise</code> 函数</p>
<h2 id="SyncHook"><a href="#SyncHook" class="headerlink" title="SyncHook"></a>SyncHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/SyncHook.js?L35:1">SyncHook</a> 按注册的回调函数串行之行。</p>
<p>简单使用：</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">SyncHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">SyncHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);
<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`SyncHook`的入参的数组有关系</span>
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="string">&quot;fn0&quot;</span>; <span class="comment">// 回调函数的返回值之间没有联系</span>
&#125;);
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="string">&quot;fn1&quot;</span>;
&#125;);
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="string">&quot;fn2&quot;</span>;
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">call</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</code></pre>

<p><code>call</code>由<a href="https://sourcegraph.com/search?q=context:global+repo:%5Egithub%5C.com/webpack/tapable$+SyncHookCodeFactory&patternType=standard&sm=1">SyncHookCodeFactory</a>的<code>content</code>实现, 结果如下：</p>
<pre><code class="highlight js"><span class="comment">// 这是一段`call`方法实现的代码字符串</span>
<span class="comment">// 这段代码需要使用 `Function` 来生成`call`方法来执行</span>
<span class="comment">// 其中`this._x`就是注册的回调函数组成的数组</span>
<span class="comment">// 可以看出回调函数的调用就是把数组中的函数展开</span>
<span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
<span class="title function_">_fn0</span>(arg3, arg2, arg1); <span class="comment">// 回调函数 fn0</span>
<span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
<span class="title function_">_fn1</span>(arg3, arg2, arg1); <span class="comment">// 回调函数 fn1</span>
<span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
<span class="title function_">_fn2</span>(arg3, arg2, arg1); <span class="comment">// 回调函数 fn2</span></code></pre>

<h2 id="SyncBailHook"><a href="#SyncBailHook" class="headerlink" title="SyncBailHook"></a>SyncBailHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/SyncBailHook.js?L40:1">SyncBailHook</a> 会对每次执行的结果进行检测，如果结果不是 <code>undefined</code> 就直接 <code>return</code> 了，后面的回调函数就没有机会执行了。</p>
<p>简单使用：</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">SyncBailHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="comment">// 同步执行回调函数，回调函数返回结果不是 `undefined` 就直接 `return` 了，后面的回调函数就没有机会执行了</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">SyncBailHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);
<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`SyncBailHook`的入参的数组有关系</span>
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="literal">undefined</span>;
&#125;);
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
  <span class="comment">// 如果回调函数的返回结果不是 `undefined` 就直接 `return` 了，后面的回调函数就没有机会执行了</span>
  <span class="keyword">return</span> <span class="string">&quot;fn1&quot;</span>;
&#125;);
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="literal">undefined</span>;
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">call</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</code></pre>

<p><code>call</code>由<code>SyncBailHookCodeFactory</code>的<code>content</code>实现, 结果如下：</p>
<pre><code class="highlight js"><span class="comment">// 这是一段`call`方法实现的代码字符串</span>
<span class="comment">// 参数和SyncHook是一致的，区别在于回调函数的返回值</span>
<span class="comment">// 如果回调函数的返回结果不是 `undefined` 就直接 `return` 了，后面的回调函数就没有机会执行了。</span>
<span class="comment">// 就像一个有限的套娃🪆</span>
<span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
<span class="keyword">var</span> _result0 = <span class="title function_">_fn0</span>(arg3, arg2, arg1);
<span class="comment">// 如果返回结果不是 `undefined` 就直接 `return` 了，后面的回调函数就没有机会执行了。</span>
<span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;
  <span class="keyword">return</span> _result0;
&#125; <span class="keyword">else</span> &#123;
  <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
  <span class="keyword">var</span> _result1 = <span class="title function_">_fn1</span>(arg3, arg2, arg1);
  <span class="comment">// 如果返回结果不是 `undefined` 就直接 `return` 了，后面的回调函数就没有机会执行了。</span>
  <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;
    <span class="keyword">return</span> _result1;
  &#125; <span class="keyword">else</span> &#123;
    <span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
    <span class="keyword">var</span> _result2 = <span class="title function_">_fn2</span>(arg3, arg2, arg1);
    <span class="comment">// 如果返回结果不是 `undefined` 就直接 `return` 了，后面的回调函数就没有机会执行了。</span>
    <span class="keyword">if</span> (_result2 !== <span class="literal">undefined</span>) &#123;
      <span class="keyword">return</span> _result2;
    &#125; <span class="keyword">else</span> &#123;
    &#125;
  &#125;
&#125;</code></pre>

<h2 id="SyncLoopHook"><a href="#SyncLoopHook" class="headerlink" title="SyncLoopHook"></a>SyncLoopHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/SyncLoopHook.js?L35:1">SyncLoopHook</a> 会对每次执行的结果进行检测，如果结果不是 <code>undefined</code> 就不停循环第一个回调函数到当前回调函数，直至都返回 <code>undefined</code>。</p>
<p>简单使用：</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">SyncLoopHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">SyncLoopHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);
<span class="keyword">let</span> _loop = <span class="number">4</span>;

<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`SyncLoopHook`的入参的数组有关系</span>
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="literal">undefined</span>;
&#125;);
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
  _loop = _loop - <span class="number">1</span>;
  <span class="comment">// 如果返回结果不是 `undefined` 就不停循环 `f0` `f1`，直至都返回 `undefined`。</span>
  <span class="keyword">return</span> _loop &gt; <span class="number">0</span> ? _loop : <span class="literal">undefined</span>;
&#125;);
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="literal">undefined</span>;
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">call</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</code></pre>

<p><code>call</code>由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/SyncLoopHook.js?L10:1">SyncLoopHookCodeFactory</a>的<code>content</code>实现, 结果如下：</p>
<pre><code class="highlight js"><span class="comment">// 这是一段`call`方法实现的代码字符串</span>
<span class="comment">// 参数和SyncHook是一致的，区别在于回调函数的返回值</span>
<span class="comment">// 如果结果不是 `undefined` 就不停循环第一个回调函数到当前回调函数，直至都返回 `undefined`</span>
<span class="comment">// 注意: 不返回`undefined`就不停循环，容易造成死循环</span>
<span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">var</span> _loop;
<span class="keyword">do</span> &#123;
  _loop = <span class="literal">false</span>;
  <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
  <span class="keyword">var</span> _result0 = <span class="title function_">_fn0</span>(arg3, arg2, arg1);
  <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;
    _loop = <span class="literal">true</span>;
  &#125; <span class="keyword">else</span> &#123;
    <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
    <span class="keyword">var</span> _result1 = <span class="title function_">_fn1</span>(arg3, arg2, arg1);
    <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;
      _loop = <span class="literal">true</span>;
    &#125; <span class="keyword">else</span> &#123;
      <span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
      <span class="keyword">var</span> _result2 = <span class="title function_">_fn2</span>(arg3, arg2, arg1);
      <span class="keyword">if</span> (_result2 !== <span class="literal">undefined</span>) &#123;
        _loop = <span class="literal">true</span>;
      &#125; <span class="keyword">else</span> &#123;
        <span class="keyword">if</span> (!_loop) &#123;
        &#125;
      &#125;
    &#125;
  &#125;
&#125; <span class="keyword">while</span> (_loop);</code></pre>

<h2 id="SyncWaterfallHook"><a href="#SyncWaterfallHook" class="headerlink" title="SyncWaterfallHook"></a>SyncWaterfallHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/SyncWaterfallHook.js?L44">SyncWaterfallHook</a> 会对每次执行的结果当成下一个回调函数的入参（<code>call</code>的入参 ），如果返回值是 <code>undefined</code>，使用上一个参数。</p>
<p>简单使用：</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">SyncWaterfallHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">SyncWaterfallHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);

<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`SyncWaterfallHook`的入参的数组有关系</span>
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="string">&quot;fn0-result&quot;</span>;
&#125;);
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="literal">undefined</span>;
&#125;);
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="string">&quot;fn2&quot;</span>;
&#125;);
hook.<span class="title function_">tap</span>(<span class="string">&quot;fn3&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn3&quot;</span>, arg1, arg2, arg3);
  <span class="keyword">return</span> <span class="string">&quot;fn3&quot;</span>;
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">call</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);
<span class="comment">// 执行结果：</span>
<span class="comment">// fn0 a b c</span>
<span class="comment">// fn1 fn0-result b c</span>
<span class="comment">// fn2 fn0-result b c</span>
<span class="comment">// fn3 fn2 b c</span></code></pre>

<p><code>call</code>由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/SyncWaterfallHook.js?L10:7">SyncWaterfallHookCodeFactory</a>的<code>content</code>实现, 结果如下：</p>
<pre><code class="highlight js"><span class="comment">// 这是一段`call`方法实现的代码字符串</span>
<span class="comment">// 参数和SyncHook是一致的，区别在于回调函数的返回值</span>
<span class="comment">// 如果返回值是 `undefined` , 使用`call`的参数，否则使用返回的值</span>
<span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
<span class="keyword">var</span> _result0 = <span class="title function_">_fn0</span>(arg1, arg2, arg3);
<span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;
  <span class="comment">// 如果返回值是 `undefined` , 使用`call`的参数，否则使用返回的值</span>
  arg1 = _result0;
&#125;
<span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
<span class="keyword">var</span> _result1 = <span class="title function_">_fn1</span>(arg1, arg2, arg3);
<span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;
  <span class="comment">// 如果返回值是 `undefined` , 使用`call`的参数，否则使用返回的值</span>
  arg1 = _result1;
&#125;
<span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
<span class="keyword">var</span> _result2 = <span class="title function_">_fn2</span>(arg1, arg2, arg3);
<span class="keyword">if</span> (_result2 !== <span class="literal">undefined</span>) &#123;
  <span class="comment">// 如果返回值是 `undefined` , 使用`call`的参数，否则使用返回的值</span>
  arg1 = _result2;
&#125;
<span class="keyword">var</span> _fn3 = _x[<span class="number">3</span>];
<span class="keyword">var</span> _result3 = <span class="title function_">_fn3</span>(arg1, arg2, arg3);
<span class="keyword">if</span> (_result3 !== <span class="literal">undefined</span>) &#123;
  arg1 = _result3;
&#125;
<span class="keyword">return</span> arg1;</code></pre>

<h2 id="AsyncSeriesHook"><a href="#AsyncSeriesHook" class="headerlink" title="AsyncSeriesHook"></a>AsyncSeriesHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncSeriesHook.js?L26:1">AsyncSeriesHook</a>异步串行</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">AsyncSeriesHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">AsyncSeriesHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);

<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`AsyncSeriesHook`的入参的数组有关系</span>
hook.<span class="title function_">tapAsync</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
    <span class="title function_">callback</span>();
  &#125;, <span class="number">1000</span>);
&#125;);
hook.<span class="title function_">tapAsync</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
    <span class="title function_">callback</span>();
  &#125;, <span class="number">1000</span>);
&#125;);
hook.<span class="title function_">tapAsync</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
    <span class="title function_">callback</span>(); <span class="comment">// 决定 `callAsync` 最后的实参callback是否会被调用</span>
  &#125;, <span class="number">1000</span>);
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">callAsync</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="function">() =&gt;</span> &#123;
  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;AsyncSeriesHook async&quot;</span>);
&#125;);

<span class="comment">// 执行结果：</span>
<span class="comment">// fn0 a b c</span>
<span class="comment">// fn1 a b c</span>
<span class="comment">// fn2 a b c</span>
<span class="comment">// AsyncSeriesHook async</span></code></pre>

<p><code>callAsync</code> 由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncSeriesHook.js?L10:1">AsyncSeriesHookCodeFactory</a>的<code>content</code>实现, 更深层次来说应该是由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L7:1">HookCodeFactory</a>的<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L276">callTapsSeries</a>实现。 结果如下：</p>
<pre><code class="highlight js"><span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">function</span> <span class="title function_">_next1</span>(<span class="params"></span>) &#123;
  <span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
  <span class="title function_">_fn2</span>(arg1, arg2, arg3, <span class="keyword">function</span> (<span class="params">_err2</span>) &#123;
    <span class="comment">// ...</span>
  &#125;);
&#125;
<span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;
  <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
  <span class="title function_">_fn1</span>(arg1, arg2, arg3, <span class="keyword">function</span> (<span class="params">_err1</span>) &#123;
    <span class="comment">// ...</span>
    <span class="title function_">_next1</span>();
  &#125;);
&#125;
<span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
<span class="title function_">_fn0</span>(arg1, arg2, arg3, <span class="keyword">function</span> (<span class="params">_err0</span>) &#123;
  <span class="comment">// ...</span>
  <span class="title function_">_next0</span>();
&#125;);</code></pre>

<p><code>Promise</code> 方式</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">AsyncSeriesHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);

<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">AsyncSeriesHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);

<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`AsyncSeriesHook`的入参的数组有关系</span>
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">promise</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);</code></pre>

<p><code>promise</code> 由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncSeriesHook.js?L10:1">AsyncSeriesHookCodeFactory</a>的<code>content</code>实现, 更深层次来说应该是由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L7:1">HookCodeFactory</a>的<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L276">callTapsSeries</a>实现。 结果如下：</p>
<pre><code class="highlight js"><span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">function</span> <span class="title function_">_next1</span>(<span class="params"></span>) &#123;
  <span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
  <span class="keyword">var</span> _hasResult2 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise2 = <span class="title function_">_fn2</span>(arg1, arg2, arg3);
  _promise2.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">_result2</span>) &#123;
    _hasResult2 = <span class="literal">true</span>;
  &#125;);
&#125;
<span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;
  <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
  <span class="keyword">var</span> _hasResult1 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise1 = <span class="title function_">_fn1</span>(arg1, arg2, arg3);
  _promise1.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">_result1</span>) &#123;
    _hasResult1 = <span class="literal">true</span>;
    <span class="title function_">_next1</span>();
  &#125;);
&#125;
<span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
<span class="keyword">var</span> _hasResult0 = <span class="literal">false</span>;
<span class="keyword">var</span> _promise0 = <span class="title function_">_fn0</span>(arg1, arg2, arg3);
_promise0.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">_result0</span>) &#123;
  _hasResult0 = <span class="literal">true</span>;
  <span class="title function_">_next0</span>();
&#125;);</code></pre>

<h2 id="AsyncSeriesBailHook"><a href="#AsyncSeriesBailHook" class="headerlink" title="AsyncSeriesBailHook"></a>AsyncSeriesBailHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncSeriesBailHook.js?L31">AsyncSeriesBailHook</a> 会对每次异步执行的结果进行检测，如果结果不是 <code>undefined</code> 就直接 <code>return</code> 了，后面的回调函数就没有机会执行了</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">AsyncSeriesBailHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">AsyncSeriesBailHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);

<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`AsyncSeriesBailHook`的入参的数组有关系</span>
<span class="comment">// 串行调用</span>
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>(<span class="number">12</span>); <span class="comment">// 后面的回调不会执行</span>
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">promise</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);

<span class="comment">// 执行结果：</span>
<span class="comment">// fn0 a b c</span>
<span class="comment">// fn1 a b c</span></code></pre>

<p><code>tapAsync</code> 和 <code>callAsync</code>的组合同理</p>
<pre><code class="highlight js"><span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">function</span> <span class="title function_">_next1</span>(<span class="params"></span>) &#123;
  <span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
  <span class="keyword">var</span> _hasResult2 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise2 = <span class="title function_">_fn2</span>(arg1, arg2, arg3);
  <span class="comment">//...</span>
  _promise2.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">_result2</span>) &#123;
    _hasResult2 = <span class="literal">true</span>;
    <span class="keyword">if</span> (_result2 !== <span class="literal">undefined</span>) &#123;
      <span class="keyword">return</span> _result2;
    &#125; <span class="keyword">else</span> &#123;
    &#125;
  &#125;);
&#125;
<span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;
  <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
  <span class="keyword">var</span> _hasResult1 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise1 = <span class="title function_">_fn1</span>(arg1, arg2, arg3);
  <span class="comment">//...</span>
  _promise1.<span class="title function_">then</span>(
    <span class="keyword">function</span> (<span class="params">_result1</span>) &#123;
      _hasResult1 = <span class="literal">true</span>;
      <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;
        <span class="keyword">return</span> _result1;
      &#125; <span class="keyword">else</span> &#123;
        <span class="keyword">return</span> <span class="title function_">_next1</span>();
      &#125;
    &#125;
    <span class="comment">//...</span>
  );
&#125;
<span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
<span class="keyword">var</span> _hasResult0 = <span class="literal">false</span>;
<span class="keyword">var</span> _promise0 = <span class="title function_">_fn0</span>(arg1, arg2, arg3);
<span class="comment">//...</span>
_promise0.<span class="title function_">then</span>(
  <span class="keyword">function</span> (<span class="params">_result0</span>) &#123;
    _hasResult0 = <span class="literal">true</span>;
    <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;
      <span class="keyword">return</span> _result0;
    &#125; <span class="keyword">else</span> &#123;
      <span class="keyword">return</span> <span class="title function_">_next0</span>();
    &#125;
  &#125;
  <span class="comment">//...</span>
);</code></pre>

<h2 id="AsyncSeriesLoopHook"><a href="#AsyncSeriesLoopHook" class="headerlink" title="AsyncSeriesLoopHook"></a>AsyncSeriesLoopHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncSeriesLoopHook.js?L26">AsyncSeriesLoopHook</a>会对每次异步执行的结果进行检测，如果结果不是 <code>undefined</code> 就不停循环第一个回调函数到当前回调函数，直至都返回 <code>undefined</code>。</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">AsyncSeriesLoopHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">AsyncSeriesLoopHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);

<span class="keyword">let</span> _loop = <span class="number">2</span>; <span class="comment">// 循环两次</span>

<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`AsyncSeriesLoopHook`的入参的数组有关系</span>
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>(_loop &gt; <span class="number">0</span> ? <span class="string">&quot;fn1 result&quot;</span> : <span class="literal">undefined</span>);
      _loop = _loop - <span class="number">1</span>;
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">promise</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);

<span class="comment">// 执行结果</span>
<span class="comment">// fn0 a b c</span>
<span class="comment">// fn1 a b c</span>
<span class="comment">// fn0 a b c // 循环</span>
<span class="comment">// fn1 a b c // 循环</span>
<span class="comment">// fn0 a b c // 循环</span>
<span class="comment">// fn1 a b c // 循环</span>
<span class="comment">// fn2 a b c</span></code></pre>

<p><code>tapAsync</code> 和 <code>callAsync</code>的组合同理</p>
<p><code>promise</code> 由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncSeriesLoopHook.js?L10:1">AsyncSeriesLoopHookCodeFactory</a>的<code>content</code>实现, 更深层次来说应该是由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L7:1">HookCodeFactory</a>的<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L324:2">callTapsLooping</a>实现。 结果如下：</p>
<pre><code class="highlight js"><span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">var</span> _looper = <span class="keyword">function</span> (<span class="params"></span>) &#123;
  <span class="keyword">var</span> _loopAsync = <span class="literal">false</span>;
  <span class="keyword">var</span> _loop;
  <span class="keyword">do</span> &#123;
    _loop = <span class="literal">false</span>;
    <span class="keyword">function</span> <span class="title function_">_next1</span>(<span class="params"></span>) &#123;
      <span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
      <span class="keyword">var</span> _hasResult2 = <span class="literal">false</span>;
      <span class="keyword">var</span> _promise2 = <span class="title function_">_fn2</span>(arg1, arg2, arg3);
      <span class="comment">// 判断返回是不是promise</span>
      <span class="keyword">if</span> (!_promise2 || !_promise2.<span class="property">then</span>)
        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(
          <span class="string">&quot;Tap function (tapPromise) did not return promise (returned &quot;</span> +
            _promise2 +
            <span class="string">&quot;)&quot;</span>
        );
      _promise2.<span class="title function_">then</span>(
        <span class="keyword">function</span> (<span class="params">_result2</span>) &#123;
          _hasResult2 = <span class="literal">true</span>;
          <span class="keyword">if</span> (_result2 !== <span class="literal">undefined</span>) &#123;
            _loop = <span class="literal">true</span>;
            <span class="keyword">if</span> (_loopAsync) <span class="title function_">_looper</span>();
          &#125; <span class="keyword">else</span> &#123;
            <span class="keyword">if</span> (!_loop) &#123;
            &#125;
          &#125;
        &#125;
        <span class="comment">// ... reject 处理</span>
      );
    &#125;
    <span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;
      <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
      <span class="keyword">var</span> _hasResult1 = <span class="literal">false</span>;
      <span class="keyword">var</span> _promise1 = <span class="title function_">_fn1</span>(arg1, arg2, arg3);
      <span class="comment">// ...</span>
      _promise1.<span class="title function_">then</span>(
        <span class="keyword">function</span> (<span class="params">_result1</span>) &#123;
          _hasResult1 = <span class="literal">true</span>;
          <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;
            _loop = <span class="literal">true</span>;
            <span class="keyword">if</span> (_loopAsync) <span class="title function_">_looper</span>();
          &#125; <span class="keyword">else</span> &#123;
            <span class="title function_">_next1</span>();
          &#125;
        &#125;
        <span class="comment">// ... reject 处理</span>
      );
    &#125;
    <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
    <span class="keyword">var</span> _hasResult0 = <span class="literal">false</span>;
    <span class="keyword">var</span> _promise0 = <span class="title function_">_fn0</span>(arg1, arg2, arg3);
    <span class="comment">// ...</span>
    _promise0.<span class="title function_">then</span>(
      <span class="keyword">function</span> (<span class="params">_result0</span>) &#123;
        _hasResult0 = <span class="literal">true</span>;
        <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;
          _loop = <span class="literal">true</span>;
          <span class="keyword">if</span> (_loopAsync) <span class="title function_">_looper</span>();
        &#125; <span class="keyword">else</span> &#123;
          <span class="title function_">_next0</span>();
        &#125;
      &#125;
      <span class="comment">// ... reject 处理</span>
    );
  &#125; <span class="keyword">while</span> (_loop);
  _loopAsync = <span class="literal">true</span>;
&#125;;
<span class="title function_">_looper</span>();</code></pre>

<h2 id="AsyncSeriesWaterfallHook"><a href="#AsyncSeriesWaterfallHook" class="headerlink" title="AsyncSeriesWaterfallHook"></a>AsyncSeriesWaterfallHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncSeriesWaterfallHook.js?L34">AsyncSeriesWaterfallHook</a>会对每次执行异步函数的结果当成下一个回调函数的入参（<code>callAsync</code>&#x2F;<code>promise</code>的入参 ），如果返回值是 <code>undefined</code>，使用上一个参数。</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">AsyncSeriesWaterfallHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">AsyncSeriesWaterfallHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);

<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`AsyncSeriesWaterfallHook`的入参的数组有关系</span>
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>(<span class="string">&quot;fn1-result&quot;</span>); <span class="comment">// 返回值作为fn2的第一个入参</span>
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3, callback</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">promise</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);

<span class="comment">// 执行结果</span>
<span class="comment">// fn0 a b c</span>
<span class="comment">// fn1 a b c</span>
<span class="comment">// fn2 fn1-result b c</span></code></pre>

<p><code>tapAsync</code> 和 <code>callAsync</code>的组合同理</p>
<p><code>promise</code> 由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncSeriesWaterfallHook.js?L10:1">AsyncSeriesWaterfallHookCodeFactory</a>的<code>content</code>实现, 更深层次来说应该是由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L7:1">HookCodeFactory</a>的<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L276">callTapsSeries</a>实现。 结果如下：</p>
<pre><code class="highlight js"><span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">function</span> <span class="title function_">_next2</span>(<span class="params"></span>) &#123;
  <span class="keyword">var</span> _fn3 = _x[<span class="number">3</span>];
  <span class="keyword">var</span> _hasResult3 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise3 = <span class="title function_">_fn3</span>(arg1, arg2, arg3);
  <span class="keyword">if</span> (!_promise3 || !_promise3.<span class="property">then</span>)
    <span class="comment">// 判断返回是不是promise</span>
    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(
      <span class="string">&quot;Tap function (tapPromise) did not return promise (returned &quot;</span> +
        _promise3 +
        <span class="string">&quot;)&quot;</span>
    );
  _promise3.<span class="title function_">then</span>(
    <span class="keyword">function</span> (<span class="params">_result3</span>) &#123;
      _hasResult3 = <span class="literal">true</span>;
      <span class="keyword">if</span> (_result3 !== <span class="literal">undefined</span>) &#123;
        arg1 = _result3;
      &#125;
      <span class="keyword">return</span> arg1;
    &#125;
    <span class="comment">// ...</span>
  );
&#125;
<span class="keyword">function</span> <span class="title function_">_next1</span>(<span class="params"></span>) &#123;
  <span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
  <span class="keyword">var</span> _hasResult2 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise2 = <span class="title function_">_fn2</span>(arg1, arg2, arg3);
  <span class="comment">// ...</span>
  _promise2.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">_result2</span>) &#123;
    _hasResult2 = <span class="literal">true</span>;
    <span class="keyword">if</span> (_result2 !== <span class="literal">undefined</span>) &#123;
      arg1 = _result2;
    &#125;
    <span class="title function_">_next2</span>();
  &#125;);
&#125;
<span class="keyword">function</span> <span class="title function_">_next0</span>(<span class="params"></span>) &#123;
  <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
  <span class="keyword">var</span> _hasResult1 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise1 = <span class="title function_">_fn1</span>(arg1, arg2, arg3);
  <span class="comment">// ...</span>
  _promise1.<span class="title function_">then</span>(
    <span class="keyword">function</span> (<span class="params">_result1</span>) &#123;
      _hasResult1 = <span class="literal">true</span>;
      <span class="keyword">if</span> (_result1 !== <span class="literal">undefined</span>) &#123;
        arg1 = _result1;
      &#125;
      <span class="title function_">_next1</span>();
    &#125;
    <span class="comment">// ...</span>
  );
&#125;
<span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
<span class="keyword">var</span> _hasResult0 = <span class="literal">false</span>;
<span class="keyword">var</span> _promise0 = <span class="title function_">_fn0</span>(arg1, arg2, arg3);
<span class="comment">// ...</span>
_promise0.<span class="title function_">then</span>(
  <span class="keyword">function</span> (<span class="params">_result0</span>) &#123;
    _hasResult0 = <span class="literal">true</span>;
    <span class="keyword">if</span> (_result0 !== <span class="literal">undefined</span>) &#123;
      arg1 = _result0;
    &#125;
    <span class="title function_">_next0</span>();
  &#125;
  <span class="comment">// ...</span>
);</code></pre>

<h2 id="AsyncParallelHook"><a href="#AsyncParallelHook" class="headerlink" title="AsyncParallelHook"></a>AsyncParallelHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncParallelHook.js?L26:1">AsyncParallelHook</a>并行执行, 不关心回调函数的返回值。</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">AsyncParallelHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tapable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="comment">// 并行执行 不关心回调函数的返回值。</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">AsyncParallelHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);

<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`AsyncParallelHook`的入参的数组有关系</span>
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>(<span class="string">&quot;fn1-result&quot;</span>);
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">500</span>);
  &#125;);
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">promise</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);

<span class="comment">// 执行结果</span>
<span class="comment">// fn2 a b c</span>
<span class="comment">// fn0 a b c</span>
<span class="comment">// fn1 a b c</span></code></pre>

<p><code>tapAsync</code> 和 <code>callAsync</code>的组合同理</p>
<p><code>promise</code> 由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncParallelHook.js?L10:1">AsyncParallelHookCodeFactory</a>的<code>content</code>实现, 更深层次来说应该是由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L7:1">HookCodeFactory</a>的<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/HookCodeFactory.js?L376:2">callTapsParallel</a>实现。 结果如下：</p>
<pre><code class="highlight js"><span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">do</span> &#123;
  <span class="keyword">var</span> _counter = <span class="number">3</span>;
  <span class="keyword">var</span> _done = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;
  <span class="keyword">if</span> (_counter &lt;= <span class="number">0</span>) <span class="keyword">break</span>;
  <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
  <span class="keyword">var</span> _hasResult0 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise0 = <span class="title function_">_fn0</span>(arg1, arg2, arg3);

  <span class="comment">// 判断返回是不是promise</span>
  <span class="keyword">if</span> (!_promise0 || !_promise0.<span class="property">then</span>)
    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(
      <span class="string">&quot;Tap function (tapPromise) did not return promise (returned &quot;</span> +
        _promise0 +
        <span class="string">&quot;)&quot;</span>
    );
  _promise0.<span class="title function_">then</span>(
    <span class="keyword">function</span> (<span class="params">_result0</span>) &#123;
      _hasResult0 = <span class="literal">true</span>;
      <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
    &#125;,
    <span class="keyword">function</span> (<span class="params">_err0</span>) &#123;
      <span class="keyword">if</span> (_hasResult0) <span class="keyword">throw</span> _err0;
      <span class="keyword">if</span> (_counter &gt; <span class="number">0</span>) &#123;
        <span class="keyword">throw</span> _err0;
        _counter = <span class="number">0</span>;
      &#125;
    &#125;
  );
  <span class="keyword">if</span> (_counter &lt;= <span class="number">0</span>) <span class="keyword">break</span>;
  <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
  <span class="keyword">var</span> _hasResult1 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise1 = <span class="title function_">_fn1</span>(arg1, arg2, arg3);
  <span class="comment">// ...</span>
  _promise1.<span class="title function_">then</span>(
    <span class="keyword">function</span> (<span class="params">_result1</span>) &#123;
      _hasResult1 = <span class="literal">true</span>;
      <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
    &#125;,
    <span class="keyword">function</span> (<span class="params">_err1</span>) &#123;
      <span class="keyword">if</span> (_hasResult1) <span class="keyword">throw</span> _err1;
      <span class="keyword">if</span> (_counter &gt; <span class="number">0</span>) &#123;
        <span class="keyword">throw</span> _err1;
        _counter = <span class="number">0</span>;
      &#125;
    &#125;
  );
  <span class="keyword">if</span> (_counter &lt;= <span class="number">0</span>) <span class="keyword">break</span>;
  <span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
  <span class="keyword">var</span> _hasResult2 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise2 = <span class="title function_">_fn2</span>(arg1, arg2, arg3);
  <span class="comment">// ...</span>
  _promise2.<span class="title function_">then</span>(
    <span class="keyword">function</span> (<span class="params">_result2</span>) &#123;
      _hasResult2 = <span class="literal">true</span>;
      <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
    &#125;,
    <span class="keyword">function</span> (<span class="params">_err2</span>) &#123;
      <span class="keyword">if</span> (_hasResult2) <span class="keyword">throw</span> _err2;
      <span class="keyword">if</span> (_counter &gt; <span class="number">0</span>) &#123;
        <span class="keyword">throw</span> _err2;
        _counter = <span class="number">0</span>;
      &#125;
    &#125;
  );
&#125; <span class="keyword">while</span> (<span class="literal">false</span>);</code></pre>

<h2 id="AsyncParallelBailHook"><a href="#AsyncParallelBailHook" class="headerlink" title="AsyncParallelBailHook"></a>AsyncParallelBailHook</h2><p><a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncParallelBailHook.js?L74:1">AsyncParallelBailHook</a> 只要回调函数的返回值不为 <code>undefined</code>, 就会忽略后面的回调函数执行, 直接跳跃到 <code>callAsync</code> 等触发函数绑定的回调函数, 然后执行这个被绑定的回调函数。</p>
<p>使用和原理与 SyncBailHook 相似</p>
<pre><code class="highlight js"><span class="keyword">const</span> &#123; <span class="title class_">AsyncParallelBailHook</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;tabable&quot;</span>);
<span class="comment">// 简单来说就是实例化 Hooks 类</span>
<span class="comment">// 接收一个可选参数，参数是一个参数名的字符串数组</span>
<span class="comment">// 这组参数和注册回调函数的参数有关，</span>
<span class="comment">// 并行执行 不关心回调函数的返回值。</span>
<span class="keyword">const</span> hook = <span class="keyword">new</span> <span class="title class_">AsyncParallelBailHook</span>([<span class="string">&quot;arg1&quot;</span>, <span class="string">&quot;arg2&quot;</span>, <span class="string">&quot;arg3&quot;</span>]);

<span class="comment">// 注册</span>
<span class="comment">// 第一个入参为注册名</span>
<span class="comment">// 第二个为注册回调方法，参数的形参个数和`AsyncParallelBailHook`的入参的数组有关系</span>
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn0&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn0&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn1&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn1&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>(<span class="string">&quot;fn1-result&quot;</span>);
    &#125;, <span class="number">1000</span>);
  &#125;);
&#125;);
hook.<span class="title function_">tapPromise</span>(<span class="string">&quot;fn2&quot;</span>, <span class="function">(<span class="params">arg1, arg2, arg3</span>) =&gt;</span> &#123;
  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;
    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;
      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;fn2&quot;</span>, arg1, arg2, arg3);
      <span class="title function_">resolve</span>();
    &#125;, <span class="number">500</span>);
  &#125;);
&#125;);
<span class="comment">// 执行</span>
<span class="comment">// 执行顺序则是根据这个实例类型来决定的</span>
hook.<span class="title function_">promise</span>(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>);

<span class="comment">// 执行结果</span>
<span class="comment">// fn2 a b c</span>
<span class="comment">// fn0 a b c</span>
<span class="comment">// fn1 a b c</span></code></pre>

<p><code>tapAsync</code> 和 <code>callAsync</code>的组合同理</p>
<p><code>promise</code> 由<a href="https://sourcegraph.com/github.com/webpack/tapable/-/blob/lib/AsyncParallelBailHook.js?L10:1">AsyncParallelBailHookCodeFactory</a>的<code>content</code>实现。 结果如下：</p>
<pre><code class="highlight js"><span class="meta">&quot;use strict&quot;</span>;
<span class="keyword">var</span> _context;
<span class="keyword">var</span> _x = <span class="variable language_">this</span>.<span class="property">_x</span>;
<span class="keyword">var</span> _results = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">3</span>);
<span class="keyword">var</span> _checkDone = <span class="keyword">function</span> (<span class="params"></span>) &#123;
  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; _results.<span class="property">length</span>; i++) &#123;
    <span class="keyword">var</span> item = _results[i];
    <span class="keyword">if</span> (item === <span class="literal">undefined</span>) <span class="keyword">return</span> <span class="literal">false</span>;
    <span class="keyword">if</span> (item.<span class="property">result</span> !== <span class="literal">undefined</span>) &#123;
      <span class="keyword">return</span> item.<span class="property">result</span>;
      <span class="keyword">return</span> <span class="literal">true</span>;
    &#125;
    <span class="keyword">if</span> (item.<span class="property">error</span>) &#123;
      <span class="keyword">throw</span> item.<span class="property">error</span>;
      <span class="keyword">return</span> <span class="literal">true</span>;
    &#125;
  &#125;
  <span class="keyword">return</span> <span class="literal">false</span>;
&#125;;
<span class="keyword">do</span> &#123;
  <span class="keyword">var</span> _counter = <span class="number">3</span>;
  <span class="keyword">var</span> _done = <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;
  <span class="keyword">if</span> (_counter &lt;= <span class="number">0</span>) <span class="keyword">break</span>;
  <span class="keyword">var</span> _fn0 = _x[<span class="number">0</span>];
  <span class="keyword">var</span> _hasResult0 = <span class="literal">false</span>;
  <span class="keyword">var</span> _promise0 = <span class="title function_">_fn0</span>(arg1, arg2, arg3);
  <span class="comment">// 判断返回是不是promise</span>
  <span class="keyword">if</span> (!_promise0 || !_promise0.<span class="property">then</span>)
    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(
      <span class="string">&quot;Tap function (tapPromise) did not return promise (returned &quot;</span> +
        _promise0 +
        <span class="string">&quot;)&quot;</span>
    );
  _promise0.<span class="title function_">then</span>(
    <span class="keyword">function</span> (<span class="params">_result0</span>) &#123;
      _hasResult0 = <span class="literal">true</span>;
      <span class="keyword">if</span> (_counter &gt; <span class="number">0</span>) &#123;
        <span class="keyword">if</span> (
          <span class="number">0</span> &lt; _results.<span class="property">length</span> &amp;&amp;
          (_result0 !== <span class="literal">undefined</span> &amp;&amp; (_results.<span class="property">length</span> = <span class="number">1</span>),
          (_results[<span class="number">0</span>] = &#123; <span class="attr">result</span>: _result0 &#125;),
          <span class="title function_">_checkDone</span>())
        ) &#123;
          _counter = <span class="number">0</span>;
        &#125; <span class="keyword">else</span> &#123;
          <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
        &#125;
      &#125;
    &#125;,
    <span class="keyword">function</span> (<span class="params">_err0</span>) &#123;
      <span class="keyword">if</span> (_hasResult0) <span class="keyword">throw</span> _err0;
      <span class="keyword">if</span> (_counter &gt; <span class="number">0</span>) &#123;
        <span class="keyword">if</span> (
          <span class="number">0</span> &lt; _results.<span class="property">length</span> &amp;&amp;
          ((_results.<span class="property">length</span> = <span class="number">1</span>),
          (_results[<span class="number">0</span>] = &#123; <span class="attr">error</span>: _err0 &#125;),
          <span class="title function_">_checkDone</span>())
        ) &#123;
          _counter = <span class="number">0</span>;
        &#125; <span class="keyword">else</span> &#123;
          <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
        &#125;
      &#125;
    &#125;
  );
  <span class="keyword">if</span> (_counter &lt;= <span class="number">0</span>) <span class="keyword">break</span>;
  <span class="keyword">if</span> (<span class="number">1</span> &gt;= _results.<span class="property">length</span>) &#123;
    <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
  &#125; <span class="keyword">else</span> &#123;
    <span class="keyword">var</span> _fn1 = _x[<span class="number">1</span>];
    <span class="keyword">var</span> _hasResult1 = <span class="literal">false</span>;
    <span class="keyword">var</span> _promise1 = <span class="title function_">_fn1</span>(arg1, arg2, arg3);
    <span class="comment">// ...</span>
    _promise1.<span class="title function_">then</span>(
      <span class="keyword">function</span> (<span class="params">_result1</span>) &#123;
        _hasResult1 = <span class="literal">true</span>;
        <span class="keyword">if</span> (_counter &gt; <span class="number">0</span>) &#123;
          <span class="keyword">if</span> (
            <span class="number">1</span> &lt; _results.<span class="property">length</span> &amp;&amp;
            (_result1 !== <span class="literal">undefined</span> &amp;&amp; (_results.<span class="property">length</span> = <span class="number">2</span>),
            (_results[<span class="number">1</span>] = &#123; <span class="attr">result</span>: _result1 &#125;),
            <span class="title function_">_checkDone</span>())
          ) &#123;
            _counter = <span class="number">0</span>;
          &#125; <span class="keyword">else</span> &#123;
            <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
          &#125;
        &#125;
      &#125;,
      <span class="keyword">function</span> (<span class="params">_err1</span>) &#123;
        <span class="keyword">if</span> (_hasResult1) <span class="keyword">throw</span> _err1;
        <span class="keyword">if</span> (_counter &gt; <span class="number">0</span>) &#123;
          <span class="keyword">if</span> (
            <span class="number">1</span> &lt; _results.<span class="property">length</span> &amp;&amp;
            ((_results.<span class="property">length</span> = <span class="number">2</span>),
            (_results[<span class="number">1</span>] = &#123; <span class="attr">error</span>: _err1 &#125;),
            <span class="title function_">_checkDone</span>())
          ) &#123;
            _counter = <span class="number">0</span>;
          &#125; <span class="keyword">else</span> &#123;
            <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
          &#125;
        &#125;
      &#125;
    );
  &#125;
  <span class="keyword">if</span> (_counter &lt;= <span class="number">0</span>) <span class="keyword">break</span>;
  <span class="keyword">if</span> (<span class="number">2</span> &gt;= _results.<span class="property">length</span>) &#123;
    <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
  &#125; <span class="keyword">else</span> &#123;
    <span class="keyword">var</span> _fn2 = _x[<span class="number">2</span>];
    <span class="keyword">var</span> _hasResult2 = <span class="literal">false</span>;
    <span class="keyword">var</span> _promise2 = <span class="title function_">_fn2</span>(arg1, arg2, arg3);
    <span class="comment">// ...</span>
    _promise2.<span class="title function_">then</span>(
      <span class="keyword">function</span> (<span class="params">_result2</span>) &#123;
        _hasResult2 = <span class="literal">true</span>;
        <span class="keyword">if</span> (_counter &gt; <span class="number">0</span>) &#123;
          <span class="keyword">if</span> (
            <span class="number">2</span> &lt; _results.<span class="property">length</span> &amp;&amp;
            (_result2 !== <span class="literal">undefined</span> &amp;&amp; (_results.<span class="property">length</span> = <span class="number">3</span>),
            (_results[<span class="number">2</span>] = &#123; <span class="attr">result</span>: _result2 &#125;),
            <span class="title function_">_checkDone</span>())
          ) &#123;
            _counter = <span class="number">0</span>;
          &#125; <span class="keyword">else</span> &#123;
            <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
          &#125;
        &#125;
      &#125;,
      <span class="keyword">function</span> (<span class="params">_err2</span>) &#123;
        <span class="keyword">if</span> (_hasResult2) <span class="keyword">throw</span> _err2;
        <span class="keyword">if</span> (_counter &gt; <span class="number">0</span>) &#123;
          <span class="keyword">if</span> (
            <span class="number">2</span> &lt; _results.<span class="property">length</span> &amp;&amp;
            ((_results.<span class="property">length</span> = <span class="number">3</span>),
            (_results[<span class="number">2</span>] = &#123; <span class="attr">error</span>: _err2 &#125;),
            <span class="title function_">_checkDone</span>())
          ) &#123;
            _counter = <span class="number">0</span>;
          &#125; <span class="keyword">else</span> &#123;
            <span class="keyword">if</span> (--_counter === <span class="number">0</span>) <span class="title function_">_done</span>();
          &#125;
        &#125;
      &#125;
    );
  &#125;
&#125; <span class="keyword">while</span> (<span class="literal">false</span>);</code></pre>

<p>参考</p>
<p><a href="https://github.com/webpack/tapable">tapable</a></p>
<p><a href="https://www.cnblogs.com/dennisj/p/14606902.html">webpack 核心模块 tapable 源码解析</a></p>
]]></content>
      <categories>
        <category>Webpack</category>
      </categories>
      <tags>
        <tag>Webpack</tag>
      </tags>
  </entry>
</search>
