(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[993],{2643:function(e,n,t){"use strict";t.d(n,{Z:function(){return i}});t(7294);var r=t(9008),a=t(5893),o=function(e){var n=e.meta;return(0,a.jsx)(a.Fragment,{children:(0,a.jsxs)(r.default,{children:[(0,a.jsx)("title",{children:"".concat(n.title," (ShineShao)")}),(0,a.jsx)("meta",{name:"description",content:n.description||"ShineShao \u535a\u5ba2"}),(0,a.jsx)("meta",{name:"keywords",content:"ShineShao freeshineit Next.js Blog "})]})})};var i=function(e){var n=e.children,t=e.meta;return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(o,{meta:t}),(0,a.jsx)("article",{children:n})]})}},7342:function(e,n,t){"use strict";t.r(n),t.d(n,{meta:function(){return s},default:function(){return p}});var r=t(7462),a=t(4925),o=(t(7294),t(3905)),i=t(2643),c=["components"],s={title:"Read Rust TcpStream",description:"Rust\u539f\u751f\u8bfb\u53d6TcpStream\u5e76\u8f6c\u6210\u5b57\u7b26\u4e32",date:"2022-10-12",cover:"/static/images/rust.png"},u={meta:s},l=function(e){var n=e.children;return(0,o.kt)(i.Z,{meta:s},n)};function p(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)(l,(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"code"},(0,o.kt)("a",{parentName:"h2","aria-hidden":"true",tabIndex:-1,href:"#code"},(0,o.kt)("span",{parentName:"a",className:"icon icon-link"})),"Code"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-rust"},'use std::{\n    io::{Read, Write},\n    net::{TcpListener, TcpStream},\n};\n\nuse std::thread;\nfn main() {\n    let socket = TcpListener::bind("127.0.0.1:8080").unwrap();\n    for stream in socket.incoming() {\n        match stream {\n            Err(e) => {\n                eprintln!("error: {}", e)\n            }\n            Ok(stream) => {\n                thread::spawn(move || {\n                    handler(stream).unwrap_or_else(|error| eprintln!("{:?}", error));\n                });\n            }\n        }\n    }\n}\n\n// Starts with being connected from a client\nfn handler(mut stream: TcpStream) -> Result<(), std::io::Error> {\n    println!("Connection from {}", stream.peer_addr()?);\n    let mut buffer = [0; 128]; // \u7f13\u5b58\n    let mut request_string = String::from("");\n    // \u5faa\u73af\u8bfb\u53d6stream\u4e2d\u7684\u6570\u636e\n    loop {\n        let read_len = stream.read(&mut buffer)?;\n\n        if read_len == 0 {\n            println!("{}", request_string);\n            return Ok(());\n        }\n\n        // buffer \u7684\u957f\u5ea6\u5f88\u91cd\u8981\n        request_string += &String::from_utf8_lossy(&buffer[..read_len]).to_owned();\n\n        stream.write(&buffer[..read_len])?;\n\n        stream.flush()?;\n    }\n}\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"cargo run")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},'curl http://localhost:8080/index.html?query=str&id=100 -H "Content-Type: application/json" -X POST -d \'{"productId": 123456, "quantity": 100}\'')),(0,o.kt)("h2",{id:"request"},(0,o.kt)("a",{parentName:"h2","aria-hidden":"true",tabIndex:-1,href:"#request"},(0,o.kt)("span",{parentName:"a",className:"icon icon-link"})),"request"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'GET /index.html?query=str&id=100 HTTP/1.1  # \u7b2c\u4e00\u884c \u5305\u62ec method, path, http version\uff1b \u6839\u636e` `\u8fdb\u884c\u5206\u5272\nHost: localhost:8080   ## start \u8bf7\u6c42\u5934\uff0c \u6839\u636e`:`\u8fdb\u884c\u5206\u5272\nConnection: keep-alive\nCache-Control: max-age=0\nsec-ch-ua: "Google Chrome";v="105", "Not)A;Brand";v="8", "Chromium";v="105"\nsec-ch-ua-mobile: ?0\nsec-ch-ua-platform: "macOS"\nUpgrade-Insecure-Requests: 1\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.0.0 Safari/537.36\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\nSec-Fetch-Site: none\nSec-Fetch-Mode: navigate\nSec-Fetch-User: ?1\nSec-Fetch-Dest: document\nAccept-Encoding: gzip, deflate, br\nAccept-Language: en-US,en;q=0.9,zh-CN;q=0.8,zh;q=0.7\nContent-Type: application/json ## end\n\n{"productId": 123456, "quantity": 100} # \u8bf7\u6c42\u6570\u636e\n')))}p.isMDXComponent=!0},8771:function(e,n,t){(window.__NEXT_P=window.__NEXT_P||[]).push(["/blog/rust/tcp_stream_read",function(){return t(7342)}])},7462:function(e,n,t){"use strict";function r(){return(r=Object.assign||function(e){for(var n=1;n<arguments.length;n++){var t=arguments[n];for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r])}return e}).apply(this,arguments)}t.d(n,{Z:function(){return r}})}},function(e){e.O(0,[774,888,179],(function(){return n=8771,e(e.s=n);var n}));var n=e.O();_N_E=n}]);