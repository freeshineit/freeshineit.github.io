(window.webpackJsonp_N_E=window.webpackJsonp_N_E||[]).push([[4],{"1pcn":function(n,e,i){"use strict";i.r(e),i.d(e,"meta",(function(){return c})),i.d(e,"default",(function(){return u}));var t=i("wx14"),a=i("Ff2n"),r=i("q1tI"),o=i.n(r),s=i("7ljp"),l=i("Op8E"),c=(o.a.createElement,{title:"Next.js next.config.js ",description:"Next.js next.config.js",date:"2020-11-22"}),f={meta:c},d=function(n){var e=n.children;return Object(s.b)(l.a,{meta:c},e)};function u(n){var e=n.components,i=Object(a.a)(n,["components"]);return Object(s.b)(d,Object(t.a)({},f,i,{components:e,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"12341"},Object(s.b)("a",Object(t.a)({parentName:"h2"},{"aria-hidden":"true",tabIndex:-1,href:"#12341"}),Object(s.b)("span",Object(t.a)({parentName:"a"},{className:"icon icon-link"}))),"12341"),Object(s.b)("h1",{id:"nextjs-10"},Object(s.b)("a",Object(t.a)({parentName:"h1"},{"aria-hidden":"true",tabIndex:-1,href:"#nextjs-10"}),Object(s.b)("span",Object(t.a)({parentName:"a"},{className:"icon icon-link"}))),"Next.js @10"),Object(s.b)("h2",{id:"next-\u52a0\u8f7d-nextconfigjs"},Object(s.b)("a",Object(t.a)({parentName:"h2"},{"aria-hidden":"true",tabIndex:-1,href:"#next-\u52a0\u8f7d-nextconfigjs"}),Object(s.b)("span",Object(t.a)({parentName:"a"},{className:"icon icon-link"}))),"next \u52a0\u8f7d ",Object(s.b)("inlineCode",{parentName:"h2"},"next.config.js")),Object(s.b)("h2",{id:"nextconfigjs"},Object(s.b)("a",Object(t.a)({parentName:"h2"},{"aria-hidden":"true",tabIndex:-1,href:"#nextconfigjs"}),Object(s.b)("span",Object(t.a)({parentName:"a"},{className:"icon icon-link"}))),"next.config.js"),Object(s.b)("pre",null,Object(s.b)("code",Object(t.a)({parentName:"pre"},{className:"language-js"}),"import chalk from 'chalk'\nimport findUp from 'next/dist/compiled/find-up'\nimport os from 'os'\nimport { basename, extname } from 'path'\nimport * as Log from '../../build/output/log'\nimport { CONFIG_FILE } from '../lib/constants'\nimport { execOnce } from '../lib/utils'\nimport { ImageConfig, imageConfigDefault, VALID_LOADERS } from './image-config'\n\nconst targets = ['server', 'serverless', 'experimental-serverless-trace']\nconst reactModes = ['legacy', 'blocking', 'concurrent']\n\nconst defaultConfig: { [key: string]: any } = {\n  env: [],\n  webpack: null,\n  webpackDevMiddleware: null,\n  distDir: '.next',\n  assetPrefix: '',\n  configOrigin: 'default',\n  useFileSystemPublicRoutes: true,\n  generateBuildId: () => null,\n  generateEtags: true,\n  pageExtensions: ['tsx', 'ts', 'jsx', 'js'],\n  target: 'server',\n  poweredByHeader: true,\n  compress: true,\n  analyticsId: process.env.VERCEL_ANALYTICS_ID || '',\n  images: imageConfigDefault,\n  devIndicators: {\n    buildActivity: true,\n  },\n  onDemandEntries: {\n    maxInactiveAge: 60 * 1000,\n    pagesBufferLength: 2,\n  },\n  amp: {\n    canonicalBase: '',\n  },\n  basePath: '',\n  sassOptions: {},\n  trailingSlash: false,\n  i18n: false,\n  experimental: {\n    cpus: Math.max(\n      1,\n      (Number(process.env.CIRCLE_NODE_TOTAL) ||\n        (os.cpus() || { length: 1 }).length) - 1\n    ),\n    plugins: false,\n    profiling: false,\n    sprFlushToDisk: true,\n    reactMode: 'legacy',\n    workerThreads: false,\n    pageEnv: false,\n    productionBrowserSourceMaps: false,\n    optimizeFonts: false,\n    optimizeImages: false,\n    scrollRestoration: false,\n  },\n  future: {\n    excludeDefaultMomentLocales: false,\n  },\n  serverRuntimeConfig: {},\n  publicRuntimeConfig: {},\n  reactStrictMode: false,\n}\n\nconst experimentalWarning = execOnce(() => {\n  Log.warn(chalk.bold('You have enabled experimental feature(s).'))\n  Log.warn(\n    `Experimental features are not covered by semver, and may cause unexpected or broken application behavior. ` +\n      `Use them at your own risk.`\n  )\n  console.warn()\n})\n\nfunction assignDefaults(userConfig: { [key: string]: any }) {\n  if (typeof userConfig.exportTrailingSlash !== 'undefined') {\n    console.warn(\n      chalk.yellow.bold('Warning: ') +\n        'The \"exportTrailingSlash\" option has been renamed to \"trailingSlash\". Please update your next.config.js.'\n    )\n    if (typeof userConfig.trailingSlash === 'undefined') {\n      userConfig.trailingSlash = userConfig.exportTrailingSlash\n    }\n    delete userConfig.exportTrailingSlash\n  }\n\n  const config = Object.keys(userConfig).reduce<{ [key: string]: any }>(\n    (currentConfig, key) => {\n      const value = userConfig[key]\n\n      if (value === undefined || value === null) {\n        return currentConfig\n      }\n\n      if (key === 'experimental' && value && value !== defaultConfig[key]) {\n        experimentalWarning()\n      }\n\n      if (key === 'distDir') {\n        if (typeof value !== 'string') {\n          throw new Error(\n            `Specified distDir is not a string, found type \"${typeof value}\"`\n          )\n        }\n        const userDistDir = value.trim()\n\n        // don't allow public as the distDir as this is a reserved folder for\n        // public files\n        if (userDistDir === 'public') {\n          throw new Error(\n            `The 'public' directory is reserved in Next.js and can not be set as the 'distDir'. https://err.sh/vercel/next.js/can-not-output-to-public`\n          )\n        }\n        // make sure distDir isn't an empty string as it can result in the provided\n        // directory being deleted in development mode\n        if (userDistDir.length === 0) {\n          throw new Error(\n            `Invalid distDir provided, distDir can not be an empty string. Please remove this config or set it to undefined`\n          )\n        }\n      }\n\n      if (key === 'pageExtensions') {\n        if (!Array.isArray(value)) {\n          throw new Error(\n            `Specified pageExtensions is not an array of strings, found \"${value}\". Please update this config or remove it.`\n          )\n        }\n\n        if (!value.length) {\n          throw new Error(\n            `Specified pageExtensions is an empty array. Please update it with the relevant extensions or remove it.`\n          )\n        }\n\n        value.forEach((ext) => {\n          if (typeof ext !== 'string') {\n            throw new Error(\n              `Specified pageExtensions is not an array of strings, found \"${ext}\" of type \"${typeof ext}\". Please update this config or remove it.`\n            )\n          }\n        })\n      }\n\n      if (!!value && value.constructor === Object) {\n        currentConfig[key] = {\n          ...defaultConfig[key],\n          ...Object.keys(value).reduce<any>((c, k) => {\n            const v = value[k]\n            if (v !== undefined && v !== null) {\n              c[k] = v\n            }\n            return c\n          }, {}),\n        }\n      } else {\n        currentConfig[key] = value\n      }\n\n      return currentConfig\n    },\n    {}\n  )\n\n  const result = { ...defaultConfig, ...config }\n\n  if (typeof result.assetPrefix !== 'string') {\n    throw new Error(\n      `Specified assetPrefix is not a string, found type \"${typeof result.assetPrefix}\" https://err.sh/vercel/next.js/invalid-assetprefix`\n    )\n  }\n\n  if (typeof result.basePath !== 'string') {\n    throw new Error(\n      `Specified basePath is not a string, found type \"${typeof result.basePath}\"`\n    )\n  }\n\n  if (result.basePath !== '') {\n    if (result.basePath === '/') {\n      throw new Error(\n        `Specified basePath /. basePath has to be either an empty string or a path prefix\"`\n      )\n    }\n\n    if (!result.basePath.startsWith('/')) {\n      throw new Error(\n        `Specified basePath has to start with a /, found \"${result.basePath}\"`\n      )\n    }\n\n    if (result.basePath !== '/') {\n      if (result.basePath.endsWith('/')) {\n        throw new Error(\n          `Specified basePath should not end with /, found \"${result.basePath}\"`\n        )\n      }\n\n      if (result.assetPrefix === '') {\n        result.assetPrefix = result.basePath\n      }\n\n      if (result.amp.canonicalBase === '') {\n        result.amp.canonicalBase = result.basePath\n      }\n    }\n  }\n\n  if (result?.images) {\n    const images: Partial<ImageConfig> = result.images\n\n    if (typeof images !== 'object') {\n      throw new Error(\n        `Specified images should be an object received ${typeof images}.\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n      )\n    }\n\n    if (images.domains) {\n      if (!Array.isArray(images.domains)) {\n        throw new Error(\n          `Specified images.domains should be an Array received ${typeof images.domains}.\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n        )\n      }\n\n      if (images.domains.length > 50) {\n        throw new Error(\n          `Specified images.domains exceeds length of 50, received length (${images.domains.length}), please reduce the length of the array to continue.\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n        )\n      }\n\n      const invalid = images.domains.filter(\n        (d: unknown) => typeof d !== 'string'\n      )\n      if (invalid.length > 0) {\n        throw new Error(\n          `Specified images.domains should be an Array of strings received invalid values (${invalid.join(\n            ', '\n          )}).\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n        )\n      }\n    }\n    if (images.deviceSizes) {\n      const { deviceSizes } = images\n      if (!Array.isArray(deviceSizes)) {\n        throw new Error(\n          `Specified images.deviceSizes should be an Array received ${typeof deviceSizes}.\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n        )\n      }\n\n      if (deviceSizes.length > 25) {\n        throw new Error(\n          `Specified images.deviceSizes exceeds length of 25, received length (${deviceSizes.length}), please reduce the length of the array to continue.\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n        )\n      }\n\n      const invalid = deviceSizes.filter((d: unknown) => {\n        return typeof d !== 'number' || d < 1 || d > 10000\n      })\n\n      if (invalid.length > 0) {\n        throw new Error(\n          `Specified images.deviceSizes should be an Array of numbers that are between 1 and 10000, received invalid values (${invalid.join(\n            ', '\n          )}).\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n        )\n      }\n    }\n    if (images.imageSizes) {\n      const { imageSizes } = images\n      if (!Array.isArray(imageSizes)) {\n        throw new Error(\n          `Specified images.imageSizes should be an Array received ${typeof imageSizes}.\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n        )\n      }\n\n      if (imageSizes.length > 25) {\n        throw new Error(\n          `Specified images.imageSizes exceeds length of 25, received length (${imageSizes.length}), please reduce the length of the array to continue.\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n        )\n      }\n\n      const invalid = imageSizes.filter((d: unknown) => {\n        return typeof d !== 'number' || d < 1 || d > 10000\n      })\n\n      if (invalid.length > 0) {\n        throw new Error(\n          `Specified images.imageSizes should be an Array of numbers that are between 1 and 10000, received invalid values (${invalid.join(\n            ', '\n          )}).\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n        )\n      }\n    }\n\n    if (!images.loader) {\n      images.loader = 'default'\n    }\n\n    if (!VALID_LOADERS.includes(images.loader)) {\n      throw new Error(\n        `Specified images.loader should be one of (${VALID_LOADERS.join(\n          ', '\n        )}), received invalid value (${\n          images.loader\n        }).\\nSee more info here: https://err.sh/next.js/invalid-images-config`\n      )\n    }\n\n    // Append trailing slash for non-default loaders\n    if (images.path) {\n      if (\n        images.loader !== 'default' &&\n        images.path[images.path.length - 1] !== '/'\n      ) {\n        images.path += '/'\n      }\n    }\n  }\n\n  if (result.i18n) {\n    const { i18n } = result\n    const i18nType = typeof i18n\n\n    if (i18nType !== 'object') {\n      throw new Error(\n        `Specified i18n should be an object received ${i18nType}.\\nSee more info here: https://err.sh/next.js/invalid-i18n-config`\n      )\n    }\n\n    if (!Array.isArray(i18n.locales)) {\n      throw new Error(\n        `Specified i18n.locales should be an Array received ${typeof i18n.locales}.\\nSee more info here: https://err.sh/next.js/invalid-i18n-config`\n      )\n    }\n\n    const defaultLocaleType = typeof i18n.defaultLocale\n\n    if (!i18n.defaultLocale || defaultLocaleType !== 'string') {\n      throw new Error(\n        `Specified i18n.defaultLocale should be a string.\\nSee more info here: https://err.sh/next.js/invalid-i18n-config`\n      )\n    }\n\n    if (typeof i18n.domains !== 'undefined' && !Array.isArray(i18n.domains)) {\n      throw new Error(\n        `Specified i18n.domains must be an array of domain objects e.g. [ { domain: 'example.fr', defaultLocale: 'fr', locales: ['fr'] } ] received ${typeof i18n.domains}.\\nSee more info here: https://err.sh/next.js/invalid-i18n-config`\n      )\n    }\n\n    if (i18n.domains) {\n      const invalidDomainItems = i18n.domains.filter((item: any) => {\n        if (!item || typeof item !== 'object') return true\n        if (!item.defaultLocale) return true\n        if (!item.domain || typeof item.domain !== 'string') return true\n\n        let hasInvalidLocale = false\n\n        if (Array.isArray(item.locales)) {\n          for (const locale of item.locales) {\n            if (typeof locale !== 'string') hasInvalidLocale = true\n\n            for (const domainItem of i18n.domains) {\n              if (domainItem === item) continue\n              if (domainItem.locales && domainItem.locales.includes(locale)) {\n                console.warn(\n                  `Both ${item.domain} and ${domainItem.domain} configured the locale (${locale}) but only one can. Remove it from one i18n.domains config to continue`\n                )\n                hasInvalidLocale = true\n                break\n              }\n            }\n          }\n        }\n\n        return hasInvalidLocale\n      })\n\n      if (invalidDomainItems.length > 0) {\n        throw new Error(\n          `Invalid i18n.domains values:\\n${invalidDomainItems\n            .map((item: any) => JSON.stringify(item))\n            .join(\n              '\\n'\n            )}\\n\\ndomains value must follow format { domain: 'example.fr', defaultLocale: 'fr', locales: ['fr'] }.\\nSee more info here: https://err.sh/next.js/invalid-i18n-config`\n        )\n      }\n    }\n\n    if (!Array.isArray(i18n.locales)) {\n      throw new Error(\n        `Specified i18n.locales must be an array of locale strings e.g. [\"en-US\", \"nl-NL\"] received ${typeof i18n.locales}.\\nSee more info here: https://err.sh/next.js/invalid-i18n-config`\n      )\n    }\n\n    const invalidLocales = i18n.locales.filter(\n      (locale: any) => typeof locale !== 'string'\n    )\n\n    if (invalidLocales.length > 0) {\n      throw new Error(\n        `Specified i18n.locales contains invalid values (${invalidLocales\n          .map(String)\n          .join(\n            ', '\n          )}), locales must be valid locale tags provided as strings e.g. \"en-US\".\\n` +\n          `See here for list of valid language sub-tags: http://www.iana.org/assignments/language-subtag-registry/language-subtag-registry`\n      )\n    }\n\n    if (!i18n.locales.includes(i18n.defaultLocale)) {\n      throw new Error(\n        `Specified i18n.defaultLocale should be included in i18n.locales.\\nSee more info here: https://err.sh/next.js/invalid-i18n-config`\n      )\n    }\n\n    // make sure default Locale is at the front\n    i18n.locales = [\n      i18n.defaultLocale,\n      ...i18n.locales.filter((locale: string) => locale !== i18n.defaultLocale),\n    ]\n\n    const localeDetectionType = typeof i18n.localeDetection\n\n    if (\n      localeDetectionType !== 'boolean' &&\n      localeDetectionType !== 'undefined'\n    ) {\n      throw new Error(\n        `Specified i18n.localeDetection should be undefined or a boolean received ${localeDetectionType}.\\nSee more info here: https://err.sh/next.js/invalid-i18n-config`\n      )\n    }\n  }\n\n  return result\n}\n\nexport function normalizeConfig(phase: string, config: any) {\n  if (typeof config === 'function') {\n    config = config(phase, { defaultConfig })\n\n    if (typeof config.then === 'function') {\n      throw new Error(\n        '> Promise returned in next config. https://err.sh/vercel/next.js/promise-in-next-config'\n      )\n    }\n  }\n  return config\n}\n\nexport default function loadConfig(\n  phase: string,\n  dir: string,\n  customConfig?: object | null\n) {\n  if (customConfig) {\n    return assignDefaults({ configOrigin: 'server', ...customConfig })\n  }\n  const path = findUp.sync(CONFIG_FILE, {\n    cwd: dir,\n  })\n\n  // If config file was found\n  if (path?.length) {\n    const userConfigModule = require(path)\n    const userConfig = normalizeConfig(\n      phase,\n      userConfigModule.default || userConfigModule\n    )\n\n    if (Object.keys(userConfig).length === 0) {\n      Log.warn(\n        'Detected next.config.js, no exported configuration found. https://err.sh/vercel/next.js/empty-configuration'\n      )\n    }\n\n    if (userConfig.target && !targets.includes(userConfig.target)) {\n      throw new Error(\n        `Specified target is invalid. Provided: \"${\n          userConfig.target\n        }\" should be one of ${targets.join(', ')}`\n      )\n    }\n\n    if (userConfig.amp?.canonicalBase) {\n      const { canonicalBase } = userConfig.amp || ({} as any)\n      userConfig.amp = userConfig.amp || {}\n      userConfig.amp.canonicalBase =\n        (canonicalBase.endsWith('/')\n          ? canonicalBase.slice(0, -1)\n          : canonicalBase) || ''\n    }\n\n    if (\n      userConfig.experimental?.reactMode &&\n      !reactModes.includes(userConfig.experimental.reactMode)\n    ) {\n      throw new Error(\n        `Specified React Mode is invalid. Provided: ${\n          userConfig.experimental.reactMode\n        } should be one of ${reactModes.join(', ')}`\n      )\n    }\n\n    return assignDefaults({\n      configOrigin: CONFIG_FILE,\n      configFile: path,\n      ...userConfig,\n    })\n  } else {\n    const configBaseName = basename(CONFIG_FILE, extname(CONFIG_FILE))\n    const nonJsPath = findUp.sync(\n      [\n        `${configBaseName}.jsx`,\n        `${configBaseName}.ts`,\n        `${configBaseName}.tsx`,\n        `${configBaseName}.json`,\n      ],\n      { cwd: dir }\n    )\n    if (nonJsPath?.length) {\n      throw new Error(\n        `Configuring Next.js via '${basename(\n          nonJsPath\n        )}' is not supported. Please replace the file with 'next.config.js'.`\n      )\n    }\n  }\n\n  return defaultConfig\n}\n\nexport function isTargetLikeServerless(target: string) {\n  const isServerless = target === 'serverless'\n  const isServerlessTrace = target === 'experimental-serverless-trace'\n  return isServerless || isServerlessTrace\n}\n")))}u.isMDXComponent=!0},Op8E:function(n,e,i){"use strict";var t=i("q1tI"),a=i.n(t),r=i("8Kt/"),o=i.n(r),s=a.a.createElement,l=function(n){var e=n.meta;return s(a.a.Fragment,null,s(o.a,null,s("title",null,"".concat(e.title," (ShineShao)")),s("meta",{name:"description",content:e.description||"ShineShao \u535a\u5ba2"}),s("meta",{name:"keywords",content:"ShineShao freeshineit Next.js Blog "})))},c=a.a.createElement;e.a=function(n){var e=n.children,i=n.meta;return c(a.a.Fragment,null,c(l,{meta:i}),c("article",null,e))}}}]);